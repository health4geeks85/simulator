[36mpeer         |[0m {now} {date} {time} UTC [nodeCmd] serve -> INFO 001[0m Starting peer:
[36mpeer         |[0m {now}  Version: 1.0.0
[36mpeer         |[0m {now}  Go version: go1.7.5
[36mpeer         |[0m {now}  OS/Arch: linux/amd64
[36mpeer         |[0m {now}  Chaincode:
[36mpeer         |[0m {now}   Base Image Version: 0.3.1
[36mpeer         |[0m {now}   Base Docker Namespace: hyperledger
[36mpeer         |[0m {now}   Base Docker Label: org.hyperledger.fabric
[36mpeer         |[0m {now}   Docker Namespace: hyperledger
[36mpeer         |[0m {now} 
[36mpeer         |[0m {now} {date} {time} UTC [ledgermgmt] initialize -> INFO 002[0m Initializing ledger mgmt
[36mpeer         |[0m {now} {date} {time} UTC [kvledger] NewProvider -> INFO 003[0m Initializing ledger provider
[36mpeer         |[0m {now} [36m{date} {time} UTC [kvledger.util] CreateDirIfMissing -> DEBU 004[0m CreateDirIfMissing [/var/hyperledger/production/ledgersData/ledgerProvider/]
[36mpeer         |[0m {now} [36m{date} {time} UTC [kvledger.util] logDirStatus -> DEBU 005[0m Before creating dir - [/var/hyperledger/production/ledgersData/ledgerProvider/] does not exist
[36mpeer         |[0m {now} [36m{date} {time} UTC [kvledger.util] logDirStatus -> DEBU 006[0m After creating dir - [/var/hyperledger/production/ledgersData/ledgerProvider/] exists
[36mpeer         |[0m {now} [36m{date} {time} UTC [kvledger.util] CreateDirIfMissing -> DEBU 007[0m CreateDirIfMissing [/var/hyperledger/production/ledgersData/chains/index/]
[36mpeer         |[0m {now} [36m{date} {time} UTC [kvledger.util] logDirStatus -> DEBU 008[0m Before creating dir - [/var/hyperledger/production/ledgersData/chains/index/] does not exist
[36mpeer         |[0m {now} [36m{date} {time} UTC [kvledger.util] logDirStatus -> DEBU 009[0m After creating dir - [/var/hyperledger/production/ledgersData/chains/index/] exists
[36mpeer         |[0m {now} [36m{date} {time} UTC [kvledger] NewProvider -> DEBU 00a[0m Constructing leveldb VersionedDBProvider
[36mpeer         |[0m {now} [36m{date} {time} UTC [stateleveldb] NewVersionedDBProvider -> DEBU 00b[0m constructing VersionedDBProvider dbPath=/var/hyperledger/production/ledgersData/stateLeveldb
[36mpeer         |[0m {now} [36m{date} {time} UTC [kvledger.util] CreateDirIfMissing -> DEBU 00c[0m CreateDirIfMissing [/var/hyperledger/production/ledgersData/stateLeveldb/]
[36mpeer         |[0m {now} [36m{date} {time} UTC [kvledger.util] logDirStatus -> DEBU 00d[0m Before creating dir - [/var/hyperledger/production/ledgersData/stateLeveldb/] does not exist
[36mpeer         |[0m {now} [36m{date} {time} UTC [kvledger.util] logDirStatus -> DEBU 00e[0m After creating dir - [/var/hyperledger/production/ledgersData/stateLeveldb/] exists
[36mpeer         |[0m {now} [36m{date} {time} UTC [historyleveldb] NewHistoryDBProvider -> DEBU 00f[0m constructing HistoryDBProvider dbPath=/var/hyperledger/production/ledgersData/historyLeveldb
[36mpeer         |[0m {now} [36m{date} {time} UTC [kvledger.util] CreateDirIfMissing -> DEBU 010[0m CreateDirIfMissing [/var/hyperledger/production/ledgersData/historyLeveldb/]
[36mpeer         |[0m {now} [36m{date} {time} UTC [kvledger.util] logDirStatus -> DEBU 011[0m Before creating dir - [/var/hyperledger/production/ledgersData/historyLeveldb/] does not exist
[36mpeer         |[0m {now} [36m{date} {time} UTC [kvledger.util] logDirStatus -> DEBU 012[0m After creating dir - [/var/hyperledger/production/ledgersData/historyLeveldb/] exists
[36mpeer         |[0m {now} {date} {time} UTC [kvledger] NewProvider -> INFO 013[0m ledger provider Initialized
[36mpeer         |[0m {now} [36m{date} {time} UTC [kvledger] recoverUnderConstructionLedger -> DEBU 014[0m Recovering under construction ledger
[36mpeer         |[0m {now} [36m{date} {time} UTC [kvledger] recoverUnderConstructionLedger -> DEBU 015[0m No under construction ledger found. Quitting recovery
[36mpeer         |[0m {now} {date} {time} UTC [ledgermgmt] initialize -> INFO 016[0m ledger mgmt initialized
[36mpeer         |[0m {now} {date} {time} UTC [nodeCmd] serve -> INFO 017[0m Running in chaincode development mode
[36mpeer         |[0m {now} {date} {time} UTC [nodeCmd] serve -> INFO 018[0m Disable loading validity system chaincode
[36mpeer         |[0m {now} [36m{date} {time} UTC [eventhub_producer] AddEventType -> DEBU 019[0m Registering BLOCK
[36mpeer         |[0m {now} [36m{date} {time} UTC [eventhub_producer] AddEventType -> DEBU 01a[0m Registering CHAINCODE
[36mpeer         |[0m {now} [36m{date} {time} UTC [eventhub_producer] AddEventType -> DEBU 01b[0m Registering REJECTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [eventhub_producer] AddEventType -> DEBU 01c[0m Registering REGISTER
[36mpeer         |[0m {now} [33m{date} {time} UTC [nodeCmd] createChaincodeServer -> WARN 01d[0m peer.chaincodeListenAddress is not set, use peer.listenAddress 0.0.0.0:7051
[36mpeer         |[0m {now} {date} {time} UTC [eventhub_producer] start -> INFO 01e[0m Event processor started
[36mpeer         |[0m {now} [36m{date} {time} UTC [nodeCmd] registerChaincodeSupport -> DEBU 01f[0m Chaincode startup timeout value set to 5m0s
[36mpeer         |[0m {now} {date} {time} UTC [chaincode] NewChaincodeSupport -> INFO 020[0m Chaincode support using peerAddress: peer:7051
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] NewChaincodeSupport -> DEBU 021[0m Turn off keepalive(value 0)
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] NewChaincodeSupport -> DEBU 022[0m Setting execute timeout value to 30s
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] getLogLevelFromViper -> DEBU 023[0m CORE_CHAINCODE_LEVEL set to level info
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] getLogLevelFromViper -> DEBU 024[0m CORE_CHAINCODE_SHIM set to level warning
[36mpeer         |[0m {now} {date} {time} UTC [sccapi] RegisterSysCC -> INFO 025[0m system chaincode cscc(github.com/hyperledger/fabric/core/scc/cscc) registered
[36mpeer         |[0m {now} {date} {time} UTC [sccapi] RegisterSysCC -> INFO 026[0m system chaincode lscc(github.com/hyperledger/fabric/core/scc/lscc) registered
[36mpeer         |[0m {now} {date} {time} UTC [sccapi] RegisterSysCC -> INFO 027[0m system chaincode escc(github.com/hyperledger/fabric/core/scc/escc) registered
[36mpeer         |[0m {now} {date} {time} UTC [sccapi] RegisterSysCC -> INFO 028[0m system chaincode vscc(github.com/hyperledger/fabric/core/scc/vscc) registered
[36mpeer         |[0m {now} {date} {time} UTC [sccapi] RegisterSysCC -> INFO 029[0m system chaincode qscc(github.com/hyperledger/fabric/core/chaincode/qscc) registered
[36mpeer         |[0m {now} [36m{date} {time} UTC [nodeCmd] serve -> DEBU 02a[0m Running peer
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp] GetLocalMSP -> DEBU 02b[0m Returning existing local MSP
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp] GetLocalMSP -> DEBU 02c[0m Returning existing local MSP
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp] GetDefaultSigningIdentity -> DEBU 02d[0m Obtaining default signing identity
[36mpeer         |[0m {now} {date} {time} UTC [gossip/service] func1 -> INFO 02e[0m Initialize gossip with endpoint peer:7051 and bootstrap set [127.0.0.1:7051]
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp] GetLocalMSP -> DEBU 02f[0m Returning existing local MSP
[36mpeer         |[0m {now} {date} {time} UTC [msp] DeserializeIdentity -> INFO 030[0m Obtaining identity
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp/identity] newIdentity -> DEBU 031[0m Creating identity instance for ID &{{DEFAULT 08d3cb7b7e7aa9b1e001378aa0ce558053e7785c68402348fc7c72b290ac10c4}}
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp] GetLocalMSP -> DEBU 032[0m Returning existing local MSP
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp] Validate -> DEBU 033[0m MSP DEFAULT validating identity
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp] getCertificationChain -> DEBU 034[0m MSP DEFAULT getting certification chain
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp] GetLocalMSP -> DEBU 035[0m Returning existing local MSP
[36mpeer         |[0m {now} {date} {time} UTC [msp] DeserializeIdentity -> INFO 036[0m Obtaining identity
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp/identity] newIdentity -> DEBU 037[0m Creating identity instance for ID &{{DEFAULT 08d3cb7b7e7aa9b1e001378aa0ce558053e7785c68402348fc7c72b290ac10c4}}
[36mpeer         |[0m {now} {date} {time} UTC [gossip/discovery] NewDiscoveryService -> INFO 038[0m Started {{peer:7051 [] [67 181 12 96 5 25 105 52 159 240 246 1 207 206 198 61 171 79 237 138 206 88 106 82 134 166 193 46 100 156 71 90] peer:7051}} incTime is 1517471705389014245
[36mpeer         |[0m {now} {date} {time} UTC [gossip/gossip] NewGossipService -> INFO 039[0m Creating gossip service with self membership of {{peer:7051 [] [67 181 12 96 5 25 105 52 159 240 246 1 207 206 198 61 171 79 237 138 206 88 106 82 134 166 193 46 100 156 71 90] peer:7051}}
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp] GetLocalMSP -> DEBU 03a[0m Returning existing local MSP
[36mpeer         |[0m {now} {date} {time} UTC [msp] DeserializeIdentity -> INFO 03b[0m Obtaining identity
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp/identity] newIdentity -> DEBU 03c[0m Creating identity instance for ID &{{DEFAULT 08d3cb7b7e7aa9b1e001378aa0ce558053e7785c68402348fc7c72b290ac10c4}}
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp] GetLocalMSP -> DEBU 03d[0m Returning existing local MSP
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp] Validate -> DEBU 03e[0m MSP DEFAULT validating identity
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp] getCertificationChain -> DEBU 03f[0m MSP DEFAULT getting certification chain
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp] GetLocalMSP -> DEBU 040[0m Returning existing local MSP
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp] GetDefaultSigningIdentity -> DEBU 041[0m Obtaining default signing identity
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp/identity] Sign -> DEBU 042[0m Sign: plaintext: 1801AA01CB070A2043B50C6005196934...0A2D2D2D2D2D454E44202D2D2D2D2D0A 
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp/identity] Sign -> DEBU 043[0m Sign: digest: C0747E3F286931EFFAD2665F3AE753B0CC338A9EE8660B721055BAE269604C0A 
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] NewCCContext -> DEBU 044[0m NewCCCC (chain=,chaincode=cscc,version=1.0.0,txid=7f9abb49-a6fe-4356-8b25-c6b9858aadfa,syscc=true,proposal=0x0,canname=cscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] getArgsAndEnv -> DEBU 045[0m Executable is chaincode
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] getArgsAndEnv -> DEBU 046[0m Args [chaincode -peer.address=peer:7051]
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] launchAndWaitForRegister -> DEBU 047[0m start container: cscc:1.0.0(networkid:dev,peerid:peer)
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] launchAndWaitForRegister -> DEBU 048[0m start container with args: chaincode -peer.address=peer:7051
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] launchAndWaitForRegister -> DEBU 049[0m start container with env:
[36mpeer         |[0m {now} 	CORE_CHAINCODE_ID_NAME=cscc:1.0.0
[36mpeer         |[0m {now} 	CORE_PEER_TLS_ENABLED=false
[36mpeer         |[0m {now} 	CORE_CHAINCODE_LOGGING_LEVEL=info
[36mpeer         |[0m {now} 	CORE_CHAINCODE_LOGGING_SHIM=warning
[36mpeer         |[0m {now} 	CORE_CHAINCODE_LOGGING_FORMAT=%{{color}}%{{time:2006-01-02 15:04:05.000 MST}} [%{{module}}] %{{shortfunc}} -> %{{level:.4s}} %{{id:03x}}%{{color:reset}} %{{message}}
[36mpeer         |[0m {now} [36m{date} {time} UTC [container] lockContainer -> DEBU 04a[0m waiting for container(cscc-1.0.0) lock
[36mpeer         |[0m {now} [36m{date} {time} UTC [container] lockContainer -> DEBU 04b[0m got container (cscc-1.0.0) lock
[36mpeer         |[0m {now} [36m{date} {time} UTC [inproccontroller] getInstance -> DEBU 04c[0m chaincode instance created for cscc-1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [container] unlockContainer -> DEBU 04d[0m container lock deleted(cscc-1.0.0)
[36mpeer         |[0m {now} [36m{date} {time} UTC [gossip/discovery] periodicalSendAlive -> DEBU 04e[0m Sleeping 5s
[36mpeer         |[0m {now} [36m{date} {time} UTC [gossip/discovery] periodicalReconnectToDead -> DEBU 04f[0m Sleeping 25s
[36mpeer         |[0m {now} {date} {time} UTC [gossip/gossip] start -> INFO 050[0m Gossip instance peer:7051 started
[36mpeer         |[0m {now} [36m{date} {time} UTC [gossip/discovery] Connect -> DEBU 051[0m Skipping connecting to myself
[36mpeer         |[0m {now} [36m{date} {time} UTC [inproccontroller] func2 -> DEBU 052[0m chaincode-support started for  cscc-1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleChaincodeStream -> DEBU 053[0m Current context deadline = 0001-01-01 00:00:00 +0000 UTC, ok = false
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp] GetLocalMSP -> DEBU 054[0m Returning existing local MSP
[36mpeer         |[0m {now} [36m{date} {time} UTC [gossip/gossip] syncDiscovery -> DEBU 055[0m Entering discovery sync with interval 4s
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp] GetLocalMSP -> DEBU 056[0m Returning existing local MSP
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp] GetDefaultSigningIdentity -> DEBU 057[0m Obtaining default signing identity
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp/identity] Sign -> DEBU 058[0m Sign: plaintext: 18012AE6070A2D0A09706565723A3730...0A2D2D2D2D2D454E44202D2D2D2D2D0A 
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp/identity] Sign -> DEBU 059[0m Sign: digest: AD6CAECE5721AD7714E26B0D2B4DBE00081CA5D43BA8B029310DD87082D96BB8 
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp] GetLocalMSP -> DEBU 05a[0m Returning existing local MSP
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp] GetDefaultSigningIdentity -> DEBU 05b[0m Obtaining default signing identity
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp/identity] Sign -> DEBU 05c[0m Sign: plaintext: 0A09706565723A37303531 
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp/identity] Sign -> DEBU 05d[0m Sign: digest: D18B553283AFC791A71A1AB3F379E85F4599DAAE3CE5B43F6A912E5BFD23E73D 
[36mpeer         |[0m {now} [36m{date} {time} UTC [inproccontroller] func1 -> DEBU 05e[0m chaincode started for cscc-1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] StartInProc -> DEBU 05f[0m in proc [chaincode -peer.address=peer:7051]
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] StartInProc -> DEBU 060[0m starting chat with peer using name=cscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] chatWithPeer -> DEBU 061[0m Registering.. sending REGISTER
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 062[0m []Received message REGISTER from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 063[0m []Fabric side Handling ChaincodeMessage of type: REGISTER in state created
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] beforeRegisterEvent -> DEBU 064[0m Received REGISTER in state created
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] registerHandler -> DEBU 065[0m registered handler complete for chaincode cscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] beforeRegisterEvent -> DEBU 066[0m Got REGISTER for chaincodeID = name:"cscc:1.0.0" , sending back REGISTERED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notifyDuringStartup -> DEBU 067[0m Notifying during startup
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 068[0m []Received message REGISTERED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 069[0m []Handling ChaincodeMessage of type: REGISTERED(state:created)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeRegistered -> DEBU 06a[0m Received REGISTERED, ready for invocations
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] ready -> DEBU 06b[0m sending READY
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 06c[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 06d[0m [7f9abb49]Move state message READY
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 06e[0m [7f9abb49]Fabric side Handling ChaincodeMessage of type: READY in state established
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] enterReadyState -> DEBU 06f[0m [7f9abb49]Entered state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 070[0m notifying Txid:7f9abb49-a6fe-4356-8b25-c6b9858aadfa
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 071[0m [7f9abb49]sending state message READY
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 072[0m [7f9abb49]Received message READY from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 073[0m [7f9abb49]Handling ChaincodeMessage of type: READY(state:established)
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 074[0m sending init completed
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 075[0m LaunchChaincode complete
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 076[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 077[0m chaincode canonical name: cscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 078[0m [7f9abb49]Inside sendExecuteMessage. Message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 079[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 07a[0m [7f9abb49]sendExecuteMsg trigger event INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 07b[0m [7f9abb49]Move state message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 07c[0m [7f9abb49]Fabric side Handling ChaincodeMessage of type: INIT in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 07d[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 07e[0m [7f9abb49]sending state message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 07f[0m [7f9abb49]Received message INIT from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 080[0m [7f9abb49]Handling ChaincodeMessage of type: INIT(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeInit -> DEBU 081[0m Entered state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeInit -> DEBU 082[0m [7f9abb49]Received INIT, initializing chaincode
[36mpeer         |[0m {now} {date} {time} UTC [cscc] Init -> INFO 083[0m Init CSCC
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp] GetLocalMSP -> DEBU 084[0m Returning existing local MSP
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 085[0m [7f9abb49]Init get response status: 200
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 086[0m [7f9abb49]Init succeeded. Sending COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 087[0m [7f9abb49]Move state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 088[0m [7f9abb49]Handling ChaincodeMessage of type: COMPLETED(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 089[0m [7f9abb49]send state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 08a[0m [7f9abb49]Received message COMPLETED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 08b[0m [7f9abb49]Fabric side Handling ChaincodeMessage of type: COMPLETED in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 08c[0m [7f9abb49-a6fe-4356-8b25-c6b9858aadfa]HandleMessage- COMPLETED. Notify
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 08d[0m notifying Txid:7f9abb49-a6fe-4356-8b25-c6b9858aadfa
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 08e[0m Exit
[36mpeer         |[0m {now} {date} {time} UTC [sccapi] deploySysCC -> INFO 08f[0m system chaincode cscc/(github.com/hyperledger/fabric/core/scc/cscc) deployed
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] NewCCContext -> DEBU 090[0m NewCCCC (chain=,chaincode=lscc,version=1.0.0,txid=73989ab7-ece0-4f12-87ed-5ec1fabe12a2,syscc=true,proposal=0x0,canname=lscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] getArgsAndEnv -> DEBU 091[0m Executable is chaincode
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] getArgsAndEnv -> DEBU 092[0m Args [chaincode -peer.address=peer:7051]
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] launchAndWaitForRegister -> DEBU 093[0m start container: lscc:1.0.0(networkid:dev,peerid:peer)
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] launchAndWaitForRegister -> DEBU 094[0m start container with args: chaincode -peer.address=peer:7051
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] launchAndWaitForRegister -> DEBU 095[0m start container with env:
[36mpeer         |[0m {now} 	CORE_CHAINCODE_ID_NAME=lscc:1.0.0
[36mpeer         |[0m {now} 	CORE_PEER_TLS_ENABLED=false
[36mpeer         |[0m {now} 	CORE_CHAINCODE_LOGGING_LEVEL=info
[36mpeer         |[0m {now} 	CORE_CHAINCODE_LOGGING_SHIM=warning
[36mpeer         |[0m {now} 	CORE_CHAINCODE_LOGGING_FORMAT=%{{color}}%{{time:2006-01-02 15:04:05.000 MST}} [%{{module}}] %{{shortfunc}} -> %{{level:.4s}} %{{id:03x}}%{{color:reset}} %{{message}}
[36mpeer         |[0m {now} [36m{date} {time} UTC [container] lockContainer -> DEBU 096[0m waiting for container(lscc-1.0.0) lock
[36mpeer         |[0m {now} [36m{date} {time} UTC [container] lockContainer -> DEBU 097[0m got container (lscc-1.0.0) lock
[36mpeer         |[0m {now} [36m{date} {time} UTC [inproccontroller] getInstance -> DEBU 098[0m chaincode instance created for lscc-1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [container] unlockContainer -> DEBU 099[0m container lock deleted(lscc-1.0.0)
[36mpeer         |[0m {now} [36m{date} {time} UTC [inproccontroller] func2 -> DEBU 09a[0m chaincode-support started for  lscc-1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleChaincodeStream -> DEBU 09c[0m Current context deadline = 0001-01-01 00:00:00 +0000 UTC, ok = false
[36mpeer         |[0m {now} [36m{date} {time} UTC [inproccontroller] func1 -> DEBU 09b[0m chaincode started for lscc-1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] StartInProc -> DEBU 09d[0m in proc [chaincode -peer.address=peer:7051]
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] StartInProc -> DEBU 09e[0m starting chat with peer using name=lscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] chatWithPeer -> DEBU 09f[0m Registering.. sending REGISTER
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp] GetLocalMSP -> DEBU 0a0[0m Returning existing local MSP
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 0a1[0m []Received message REGISTER from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 0a2[0m []Fabric side Handling ChaincodeMessage of type: REGISTER in state created
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] beforeRegisterEvent -> DEBU 0a3[0m Received REGISTER in state created
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] registerHandler -> DEBU 0a4[0m registered handler complete for chaincode lscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] beforeRegisterEvent -> DEBU 0a5[0m Got REGISTER for chaincodeID = name:"lscc:1.0.0" , sending back REGISTERED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notifyDuringStartup -> DEBU 0a6[0m Notifying during startup
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 0a7[0m []Received message REGISTERED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 0a8[0m []Handling ChaincodeMessage of type: REGISTERED(state:created)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeRegistered -> DEBU 0a9[0m Received REGISTERED, ready for invocations
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] ready -> DEBU 0aa[0m sending READY
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 0ab[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 0ac[0m [73989ab7]Move state message READY
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 0ad[0m [73989ab7]Fabric side Handling ChaincodeMessage of type: READY in state established
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] enterReadyState -> DEBU 0ae[0m [73989ab7]Entered state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 0af[0m notifying Txid:73989ab7-ece0-4f12-87ed-5ec1fabe12a2
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 0b0[0m [73989ab7]sending state message READY
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 0b2[0m [73989ab7]Received message READY from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 0b1[0m sending init completed
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 0b4[0m LaunchChaincode complete
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 0b5[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 0b6[0m chaincode canonical name: lscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 0b7[0m [73989ab7]Inside sendExecuteMessage. Message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 0b8[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 0b9[0m [73989ab7]sendExecuteMsg trigger event INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 0ba[0m [73989ab7]Move state message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 0bb[0m [73989ab7]Fabric side Handling ChaincodeMessage of type: INIT in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 0bc[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 0bd[0m [73989ab7]sending state message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 0b3[0m [73989ab7]Handling ChaincodeMessage of type: READY(state:established)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 0be[0m [73989ab7]Received message INIT from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 0bf[0m [73989ab7]Handling ChaincodeMessage of type: INIT(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeInit -> DEBU 0c0[0m Entered state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeInit -> DEBU 0c1[0m [73989ab7]Received INIT, initializing chaincode
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp] GetLocalMSP -> DEBU 0c2[0m Returning existing local MSP
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 0c3[0m [73989ab7]Init get response status: 200
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 0c4[0m [73989ab7]Init succeeded. Sending COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 0c5[0m [73989ab7]Move state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 0c6[0m [73989ab7]Handling ChaincodeMessage of type: COMPLETED(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 0c7[0m [73989ab7]send state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 0c8[0m [73989ab7]Received message COMPLETED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 0c9[0m [73989ab7]Fabric side Handling ChaincodeMessage of type: COMPLETED in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 0ca[0m [73989ab7-ece0-4f12-87ed-5ec1fabe12a2]HandleMessage- COMPLETED. Notify
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 0cb[0m notifying Txid:73989ab7-ece0-4f12-87ed-5ec1fabe12a2
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 0cc[0m Exit
[36mpeer         |[0m {now} {date} {time} UTC [sccapi] deploySysCC -> INFO 0cd[0m system chaincode lscc/(github.com/hyperledger/fabric/core/scc/lscc) deployed
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] NewCCContext -> DEBU 0ce[0m NewCCCC (chain=,chaincode=escc,version=1.0.0,txid=b42cf144-39f3-4b3f-8262-3bb41953f038,syscc=true,proposal=0x0,canname=escc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] getArgsAndEnv -> DEBU 0cf[0m Executable is chaincode
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] getArgsAndEnv -> DEBU 0d0[0m Args [chaincode -peer.address=peer:7051]
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] launchAndWaitForRegister -> DEBU 0d1[0m start container: escc:1.0.0(networkid:dev,peerid:peer)
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] launchAndWaitForRegister -> DEBU 0d2[0m start container with args: chaincode -peer.address=peer:7051
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] launchAndWaitForRegister -> DEBU 0d3[0m start container with env:
[36mpeer         |[0m {now} 	CORE_CHAINCODE_ID_NAME=escc:1.0.0
[36mpeer         |[0m {now} 	CORE_PEER_TLS_ENABLED=false
[36mpeer         |[0m {now} 	CORE_CHAINCODE_LOGGING_LEVEL=info
[36mpeer         |[0m {now} 	CORE_CHAINCODE_LOGGING_SHIM=warning
[36mpeer         |[0m {now} 	CORE_CHAINCODE_LOGGING_FORMAT=%{{color}}%{{time:2006-01-02 15:04:05.000 MST}} [%{{module}}] %{{shortfunc}} -> %{{level:.4s}} %{{id:03x}}%{{color:reset}} %{{message}}
[36mpeer         |[0m {now} [36m{date} {time} UTC [container] lockContainer -> DEBU 0d4[0m waiting for container(escc-1.0.0) lock
[36mpeer         |[0m {now} [36m{date} {time} UTC [container] lockContainer -> DEBU 0d5[0m got container (escc-1.0.0) lock
[36mpeer         |[0m {now} [36m{date} {time} UTC [inproccontroller] getInstance -> DEBU 0d6[0m chaincode instance created for escc-1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [container] unlockContainer -> DEBU 0d7[0m container lock deleted(escc-1.0.0)
[36mpeer         |[0m {now} [36m{date} {time} UTC [inproccontroller] func2 -> DEBU 0d8[0m chaincode-support started for  escc-1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleChaincodeStream -> DEBU 0da[0m Current context deadline = 0001-01-01 00:00:00 +0000 UTC, ok = false
[36mpeer         |[0m {now} [36m{date} {time} UTC [inproccontroller] func1 -> DEBU 0d9[0m chaincode started for escc-1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] StartInProc -> DEBU 0db[0m in proc [chaincode -peer.address=peer:7051]
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] StartInProc -> DEBU 0dc[0m starting chat with peer using name=escc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] chatWithPeer -> DEBU 0dd[0m Registering.. sending REGISTER
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp] GetLocalMSP -> DEBU 0de[0m Returning existing local MSP
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 0df[0m []Received message REGISTER from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 0e0[0m []Fabric side Handling ChaincodeMessage of type: REGISTER in state created
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] beforeRegisterEvent -> DEBU 0e1[0m Received REGISTER in state created
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] registerHandler -> DEBU 0e2[0m registered handler complete for chaincode escc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] beforeRegisterEvent -> DEBU 0e3[0m Got REGISTER for chaincodeID = name:"escc:1.0.0" , sending back REGISTERED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notifyDuringStartup -> DEBU 0e4[0m Notifying during startup
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 0e5[0m []Received message REGISTERED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] ready -> DEBU 0e7[0m sending READY
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 0e8[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 0e9[0m [b42cf144]Move state message READY
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 0ea[0m [b42cf144]Fabric side Handling ChaincodeMessage of type: READY in state established
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] enterReadyState -> DEBU 0eb[0m [b42cf144]Entered state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 0ec[0m notifying Txid:b42cf144-39f3-4b3f-8262-3bb41953f038
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 0ed[0m [b42cf144]sending state message READY
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 0ee[0m sending init completed
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 0ef[0m LaunchChaincode complete
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 0f0[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 0f1[0m chaincode canonical name: escc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 0f2[0m [b42cf144]Inside sendExecuteMessage. Message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 0f3[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 0f4[0m [b42cf144]sendExecuteMsg trigger event INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 0e6[0m []Handling ChaincodeMessage of type: REGISTERED(state:created)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeRegistered -> DEBU 0f5[0m Received REGISTERED, ready for invocations
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 0f6[0m [b42cf144]Received message READY from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 0f8[0m [b42cf144]Handling ChaincodeMessage of type: READY(state:established)
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 0f7[0m [b42cf144]Move state message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 0f9[0m [b42cf144]Fabric side Handling ChaincodeMessage of type: INIT in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 0fa[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 0fb[0m [b42cf144]sending state message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 0fc[0m [b42cf144]Received message INIT from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 0fd[0m [b42cf144]Handling ChaincodeMessage of type: INIT(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeInit -> DEBU 0fe[0m Entered state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeInit -> DEBU 0ff[0m [b42cf144]Received INIT, initializing chaincode
[36mpeer         |[0m {now} {date} {time} UTC [escc] Init -> INFO 100[0m Successfully initialized ESCC
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 101[0m [b42cf144]Init get response status: 200
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 102[0m [b42cf144]Init succeeded. Sending COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 103[0m [b42cf144]Move state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 104[0m [b42cf144]Handling ChaincodeMessage of type: COMPLETED(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 105[0m [b42cf144]send state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 106[0m [b42cf144]Received message COMPLETED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 107[0m [b42cf144]Fabric side Handling ChaincodeMessage of type: COMPLETED in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 108[0m [b42cf144-39f3-4b3f-8262-3bb41953f038]HandleMessage- COMPLETED. Notify
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 109[0m notifying Txid:b42cf144-39f3-4b3f-8262-3bb41953f038
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 10a[0m Exit
[36mpeer         |[0m {now} {date} {time} UTC [sccapi] deploySysCC -> INFO 10b[0m system chaincode escc/(github.com/hyperledger/fabric/core/scc/escc) deployed
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] NewCCContext -> DEBU 10c[0m NewCCCC (chain=,chaincode=vscc,version=1.0.0,txid=0823028b-efb4-4ad0-bdb1-11af2ee94d97,syscc=true,proposal=0x0,canname=vscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] getArgsAndEnv -> DEBU 10d[0m Executable is chaincode
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] getArgsAndEnv -> DEBU 10e[0m Args [chaincode -peer.address=peer:7051]
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] launchAndWaitForRegister -> DEBU 10f[0m start container: vscc:1.0.0(networkid:dev,peerid:peer)
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] launchAndWaitForRegister -> DEBU 110[0m start container with args: chaincode -peer.address=peer:7051
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] launchAndWaitForRegister -> DEBU 111[0m start container with env:
[36mpeer         |[0m {now} 	CORE_CHAINCODE_ID_NAME=vscc:1.0.0
[36mpeer         |[0m {now} 	CORE_PEER_TLS_ENABLED=false
[36mpeer         |[0m {now} 	CORE_CHAINCODE_LOGGING_LEVEL=info
[36mpeer         |[0m {now} 	CORE_CHAINCODE_LOGGING_SHIM=warning
[36mpeer         |[0m {now} 	CORE_CHAINCODE_LOGGING_FORMAT=%{{color}}%{{time:2006-01-02 15:04:05.000 MST}} [%{{module}}] %{{shortfunc}} -> %{{level:.4s}} %{{id:03x}}%{{color:reset}} %{{message}}
[36mpeer         |[0m {now} [36m{date} {time} UTC [container] lockContainer -> DEBU 112[0m waiting for container(vscc-1.0.0) lock
[36mpeer         |[0m {now} [36m{date} {time} UTC [container] lockContainer -> DEBU 113[0m got container (vscc-1.0.0) lock
[36mpeer         |[0m {now} [36m{date} {time} UTC [inproccontroller] getInstance -> DEBU 114[0m chaincode instance created for vscc-1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [container] unlockContainer -> DEBU 115[0m container lock deleted(vscc-1.0.0)
[36mpeer         |[0m {now} [36m{date} {time} UTC [inproccontroller] func2 -> DEBU 116[0m chaincode-support started for  vscc-1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleChaincodeStream -> DEBU 118[0m Current context deadline = 0001-01-01 00:00:00 +0000 UTC, ok = false
[36mpeer         |[0m {now} [36m{date} {time} UTC [inproccontroller] func1 -> DEBU 117[0m chaincode started for vscc-1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] StartInProc -> DEBU 119[0m in proc [chaincode -peer.address=peer:7051]
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] StartInProc -> DEBU 11a[0m starting chat with peer using name=vscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] chatWithPeer -> DEBU 11b[0m Registering.. sending REGISTER
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp] GetLocalMSP -> DEBU 11c[0m Returning existing local MSP
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 11d[0m []Received message REGISTER from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 11e[0m []Fabric side Handling ChaincodeMessage of type: REGISTER in state created
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] beforeRegisterEvent -> DEBU 11f[0m Received REGISTER in state created
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] registerHandler -> DEBU 120[0m registered handler complete for chaincode vscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] beforeRegisterEvent -> DEBU 121[0m Got REGISTER for chaincodeID = name:"vscc:1.0.0" , sending back REGISTERED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notifyDuringStartup -> DEBU 122[0m Notifying during startup
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] ready -> DEBU 124[0m sending READY
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 125[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 126[0m [0823028b]Move state message READY
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 127[0m [0823028b]Fabric side Handling ChaincodeMessage of type: READY in state established
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] enterReadyState -> DEBU 128[0m [0823028b]Entered state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 129[0m notifying Txid:0823028b-efb4-4ad0-bdb1-11af2ee94d97
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 12a[0m [0823028b]sending state message READY
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 12b[0m sending init completed
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 12c[0m LaunchChaincode complete
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 12d[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 12e[0m chaincode canonical name: vscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 12f[0m [0823028b]Inside sendExecuteMessage. Message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 130[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 131[0m [0823028b]sendExecuteMsg trigger event INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 123[0m []Received message REGISTERED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 132[0m []Handling ChaincodeMessage of type: REGISTERED(state:created)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeRegistered -> DEBU 133[0m Received REGISTERED, ready for invocations
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 134[0m [0823028b]Received message READY from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 136[0m [0823028b]Handling ChaincodeMessage of type: READY(state:established)
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 135[0m [0823028b]Move state message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 137[0m [0823028b]Fabric side Handling ChaincodeMessage of type: INIT in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 138[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 139[0m [0823028b]sending state message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 13a[0m [0823028b]Received message INIT from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 13b[0m [0823028b]Handling ChaincodeMessage of type: INIT(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeInit -> DEBU 13c[0m Entered state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeInit -> DEBU 13d[0m [0823028b]Received INIT, initializing chaincode
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 13e[0m [0823028b]Init get response status: 200
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 13f[0m [0823028b]Init succeeded. Sending COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 140[0m [0823028b]Move state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 141[0m [0823028b]Handling ChaincodeMessage of type: COMPLETED(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 142[0m [0823028b]send state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 143[0m [0823028b]Received message COMPLETED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 144[0m [0823028b]Fabric side Handling ChaincodeMessage of type: COMPLETED in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 145[0m [0823028b-efb4-4ad0-bdb1-11af2ee94d97]HandleMessage- COMPLETED. Notify
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 146[0m notifying Txid:0823028b-efb4-4ad0-bdb1-11af2ee94d97
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 147[0m Exit
[36mpeer         |[0m {now} {date} {time} UTC [sccapi] deploySysCC -> INFO 148[0m system chaincode vscc/(github.com/hyperledger/fabric/core/scc/vscc) deployed
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] NewCCContext -> DEBU 149[0m NewCCCC (chain=,chaincode=qscc,version=1.0.0,txid=87d2a0c2-824f-4261-8e8f-fb13b42ac3a3,syscc=true,proposal=0x0,canname=qscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] getArgsAndEnv -> DEBU 14a[0m Executable is chaincode
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] getArgsAndEnv -> DEBU 14b[0m Args [chaincode -peer.address=peer:7051]
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] launchAndWaitForRegister -> DEBU 14c[0m start container: qscc:1.0.0(networkid:dev,peerid:peer)
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] launchAndWaitForRegister -> DEBU 14d[0m start container with args: chaincode -peer.address=peer:7051
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] launchAndWaitForRegister -> DEBU 14e[0m start container with env:
[36mpeer         |[0m {now} 	CORE_CHAINCODE_ID_NAME=qscc:1.0.0
[36mpeer         |[0m {now} 	CORE_PEER_TLS_ENABLED=false
[36mpeer         |[0m {now} 	CORE_CHAINCODE_LOGGING_LEVEL=info
[36mpeer         |[0m {now} 	CORE_CHAINCODE_LOGGING_SHIM=warning
[36mpeer         |[0m {now} 	CORE_CHAINCODE_LOGGING_FORMAT=%{{color}}%{{time:2006-01-02 15:04:05.000 MST}} [%{{module}}] %{{shortfunc}} -> %{{level:.4s}} %{{id:03x}}%{{color:reset}} %{{message}}
[36mpeer         |[0m {now} [36m{date} {time} UTC [container] lockContainer -> DEBU 14f[0m waiting for container(qscc-1.0.0) lock
[36mpeer         |[0m {now} [36m{date} {time} UTC [container] lockContainer -> DEBU 150[0m got container (qscc-1.0.0) lock
[36mpeer         |[0m {now} [36m{date} {time} UTC [inproccontroller] getInstance -> DEBU 151[0m chaincode instance created for qscc-1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [container] unlockContainer -> DEBU 152[0m container lock deleted(qscc-1.0.0)
[36mpeer         |[0m {now} [36m{date} {time} UTC [inproccontroller] func2 -> DEBU 153[0m chaincode-support started for  qscc-1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [inproccontroller] func1 -> DEBU 154[0m chaincode started for qscc-1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] StartInProc -> DEBU 156[0m in proc [chaincode -peer.address=peer:7051]
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] StartInProc -> DEBU 157[0m starting chat with peer using name=qscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] chatWithPeer -> DEBU 158[0m Registering.. sending REGISTER
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleChaincodeStream -> DEBU 155[0m Current context deadline = 0001-01-01 00:00:00 +0000 UTC, ok = false
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp] GetLocalMSP -> DEBU 159[0m Returning existing local MSP
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 15a[0m []Received message REGISTER from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 15b[0m []Fabric side Handling ChaincodeMessage of type: REGISTER in state created
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] beforeRegisterEvent -> DEBU 15c[0m Received REGISTER in state created
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] registerHandler -> DEBU 15d[0m registered handler complete for chaincode qscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] beforeRegisterEvent -> DEBU 15e[0m Got REGISTER for chaincodeID = name:"qscc:1.0.0" , sending back REGISTERED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notifyDuringStartup -> DEBU 15f[0m Notifying during startup
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 160[0m []Received message REGISTERED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] ready -> DEBU 162[0m sending READY
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 163[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 164[0m [87d2a0c2]Move state message READY
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 165[0m [87d2a0c2]Fabric side Handling ChaincodeMessage of type: READY in state established
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] enterReadyState -> DEBU 166[0m [87d2a0c2]Entered state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 167[0m notifying Txid:87d2a0c2-824f-4261-8e8f-fb13b42ac3a3
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 168[0m [87d2a0c2]sending state message READY
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 169[0m sending init completed
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 16a[0m LaunchChaincode complete
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 16b[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 16c[0m chaincode canonical name: qscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 16d[0m [87d2a0c2]Inside sendExecuteMessage. Message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 16e[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 16f[0m [87d2a0c2]sendExecuteMsg trigger event INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 161[0m []Handling ChaincodeMessage of type: REGISTERED(state:created)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeRegistered -> DEBU 170[0m Received REGISTERED, ready for invocations
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 171[0m [87d2a0c2]Received message READY from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 173[0m [87d2a0c2]Handling ChaincodeMessage of type: READY(state:established)
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 172[0m [87d2a0c2]Move state message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 174[0m [87d2a0c2]Fabric side Handling ChaincodeMessage of type: INIT in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 175[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 176[0m [87d2a0c2]sending state message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 177[0m [87d2a0c2]Received message INIT from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 178[0m [87d2a0c2]Handling ChaincodeMessage of type: INIT(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeInit -> DEBU 179[0m Entered state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeInit -> DEBU 17a[0m [87d2a0c2]Received INIT, initializing chaincode
[36mpeer         |[0m {now} {date} {time} UTC [qscc] Init -> INFO 17b[0m Init QSCC
[36mpeer         |[0m {now} [36m{date} {time} UTC [msp] GetLocalMSP -> DEBU 17c[0m Returning existing local MSP
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 17d[0m [87d2a0c2]Init get response status: 200
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 17e[0m [87d2a0c2]Init succeeded. Sending COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 17f[0m [87d2a0c2]Move state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 180[0m [87d2a0c2]Handling ChaincodeMessage of type: COMPLETED(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 181[0m [87d2a0c2]send state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 182[0m [87d2a0c2]Received message COMPLETED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 183[0m [87d2a0c2]Fabric side Handling ChaincodeMessage of type: COMPLETED in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 184[0m [87d2a0c2-824f-4261-8e8f-fb13b42ac3a3]HandleMessage- COMPLETED. Notify
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 185[0m notifying Txid:87d2a0c2-824f-4261-8e8f-fb13b42ac3a3
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 186[0m Exit
[36mpeer         |[0m {now} {date} {time} UTC [sccapi] deploySysCC -> INFO 187[0m system chaincode qscc/(github.com/hyperledger/fabric/core/chaincode/qscc) deployed
[36mpeer         |[0m {now} {date} {time} UTC [nodeCmd] initSysCCs -> INFO 188[0m Deployed system chaincodess
[36mpeer         |[0m {now} {date} {time} UTC [nodeCmd] serve -> INFO 189[0m Starting peer with ID=[name:"peer" ], network ID=[dev], address=[peer:7051]
[36mpeer         |[0m {now} {date} {time} UTC [nodeCmd] serve -> INFO 18a[0m Started peer with ID=[name:"peer" ], network ID=[dev], address=[peer:7051]
[36mpeer         |[0m {now} [36m{date} {time} UTC [flogging] setModuleLevel -> DEBU 18b[0m Module 'configvalues/msp' logger enabled for log level 'WARNING'
[36mpeer         |[0m {now} [36m{date} {time} UTC [flogging] setModuleLevel -> DEBU 18c[0m Module 'msp' logger enabled for log level 'WARNING'
[36mpeer         |[0m {now} [36m{date} {time} UTC [flogging] setModuleLevel -> DEBU 18d[0m Module 'msp/identity' logger enabled for log level 'WARNING'
[36mpeer         |[0m {now} [36m{date} {time} UTC [flogging] setModuleLevel -> DEBU 18e[0m Module 'gossip/state' logger enabled for log level 'WARNING'
[36mpeer         |[0m {now} [36m{date} {time} UTC [flogging] setModuleLevel -> DEBU 18f[0m Module 'peer/gossip/sa' logger enabled for log level 'WARNING'
[36mpeer         |[0m {now} [36m{date} {time} UTC [flogging] setModuleLevel -> DEBU 190[0m Module 'gossip/service' logger enabled for log level 'WARNING'
[36mpeer         |[0m {now} [36m{date} {time} UTC [flogging] setModuleLevel -> DEBU 191[0m Module 'gossip/gossip' logger enabled for log level 'WARNING'
[36mpeer         |[0m {now} [36m{date} {time} UTC [flogging] setModuleLevel -> DEBU 192[0m Module 'gossip/pull' logger enabled for log level 'WARNING'
[36mpeer         |[0m {now} [36m{date} {time} UTC [flogging] setModuleLevel -> DEBU 193[0m Module 'peer/gossip/mcs' logger enabled for log level 'WARNING'
[36mpeer         |[0m {now} [36m{date} {time} UTC [flogging] setModuleLevel -> DEBU 194[0m Module 'gossip/discovery' logger enabled for log level 'WARNING'
[36mpeer         |[0m {now} [36m{date} {time} UTC [flogging] setModuleLevel -> DEBU 195[0m Module 'gossip/comm' logger enabled for log level 'WARNING'
[36mpeer         |[0m {now} [36m{date} {time} UTC [flogging] setModuleLevel -> DEBU 196[0m Module 'gossip/election' logger enabled for log level 'WARNING'
[36mpeer         |[0m {now} [36m{date} {time} UTC [flogging] setModuleLevel -> DEBU 197[0m Module 'kvledger' logger enabled for log level 'INFO'
[36mpeer         |[0m {now} [36m{date} {time} UTC [flogging] setModuleLevel -> DEBU 198[0m Module 'ledgermgmt' logger enabled for log level 'INFO'
[36mpeer         |[0m {now} [36m{date} {time} UTC [flogging] setModuleLevel -> DEBU 199[0m Module 'kvledger.util' logger enabled for log level 'INFO'
[36mpeer         |[0m {now} [36m{date} {time} UTC [flogging] setModuleLevel -> DEBU 19a[0m Module 'cauthdsl' logger enabled for log level 'WARNING'
[36mpeer         |[0m {now} [36m{date} {time} UTC [flogging] setModuleLevel -> DEBU 19b[0m Module 'policies' logger enabled for log level 'WARNING'
[36mpeer         |[0m {now} [36m{date} {time} UTC [flogging] setModuleLevel -> DEBU 19c[0m Module 'grpc' logger enabled for log level 'ERROR'
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 19d[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] ValidateProposalMessage -> DEBU 19e[0m ValidateProposalMessage starts for signed proposal 0xc4213d3cb0
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChannelHeader -> DEBU 19f[0m validateChannelHeader info: header type 1
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 1a0[0m checkSignatureFromCreator starts
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 1a1[0m checkSignatureFromCreator info: creator is &{{DEFAULT 08d3cb7b7e7aa9b1e001378aa0ce558053e7785c68402348fc7c72b290ac10c4}}
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 1a2[0m checkSignatureFromCreator info: creator is valid
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 1a3[0m checkSignatureFromCreator exists successfully
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChaincodeProposalMessage -> DEBU 1a4[0m validateChaincodeProposalMessage starts for proposal 0xc4213c3810, header 0xc4213d3d70
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChaincodeProposalMessage -> DEBU 1a5[0m validateChaincodeProposalMessage info: header extension references chaincode name:"cscc" 
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 1a6[0m processing txid: 746b53668f4d524ad087a094121c3e910d134a3682dcaadd77bc083b7ad3b656
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] simulateProposal -> DEBU 1a7[0m Entry - txid: 746b53668f4d524ad087a094121c3e910d134a3682dcaadd77bc083b7ad3b656 channel id: 
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] callChaincode -> DEBU 1a8[0m Entry - txid: 746b53668f4d524ad087a094121c3e910d134a3682dcaadd77bc083b7ad3b656 channel id:  version: 1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] NewCCContext -> DEBU 1a9[0m NewCCCC (chain=,chaincode=cscc,version=1.0.0,txid=746b53668f4d524ad087a094121c3e910d134a3682dcaadd77bc083b7ad3b656,syscc=true,proposal=0xc4213c3810,canname=cscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 1aa[0m chaincode is running(no need to launch) : cscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 1ab[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 1ac[0m chaincode canonical name: cscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 1ad[0m [746b5366]Inside sendExecuteMessage. Message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 1ae[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 1af[0m Proposal different from nil. Creating chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 1b0[0m [746b5366]sendExecuteMsg trigger event TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 1b1[0m [746b5366]Move state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 1b2[0m [746b5366]Fabric side Handling ChaincodeMessage of type: TRANSACTION in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 1b3[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 1b4[0m [746b5366]sending state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 1b5[0m [746b5366]Received message TRANSACTION from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 1b6[0m [746b5366]Handling ChaincodeMessage of type: TRANSACTION(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeTransaction -> DEBU 1b7[0m [746b5366]Received TRANSACTION, invoking transaction on chaincode(Src:ready, Dst:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [cscc] Invoke -> DEBU 1b8[0m Invoke function: JoinChain
[36mpeer         |[0m {now} {date} {time} UTC [ledgermgmt] CreateLedger -> INFO 1b9[0m Creating ledger [myc] with genesis block
[36mpeer         |[0m {now} [36m{date} {time} UTC [fsblkstorage] newBlockfileMgr -> DEBU 1ba[0m newBlockfileMgr() initializing file-based block storage for ledger: myc 
[36mpeer         |[0m {now} [36m{date} {time} UTC [fsblkstorage] syncCPInfoFromFS -> DEBU 1bb[0m Starting checkpoint=latestFileChunkSuffixNum=[0], latestFileChunksize=[0], isChainEmpty=[true], lastBlockNumber=[0]
[36mpeer         |[0m {now} [36m{date} {time} UTC [fsblkstorage] syncCPInfoFromFS -> DEBU 1bc[0m status of file [/var/hyperledger/production/ledgersData/chains/chains/myc/blockfile_000000]: exists=[false], size=[0]
[36mpeer         |[0m {now} [36m{date} {time} UTC [fsblkstorage] newBlockIndex -> DEBU 1bd[0m newBlockIndex() - indexItems:[[BlockHash BlockNum TxID BlockNumTranNum BlockTxID TxValidationCode]]
[36mpeer         |[0m {now} [36m{date} {time} UTC [fsblkstorage] newBlockfileStream -> DEBU 1be[0m newBlockfileStream(): filePath=[/var/hyperledger/production/ledgersData/chains/chains/myc/blockfile_000000], startOffset=[0]
[36mpeer         |[0m {now} [36m{date} {time} UTC [fsblkstorage] nextBlockBytesAndPlacementInfo -> DEBU 1bf[0m Finished reading file number [0]
[36mpeer         |[0m {now} [36m{date} {time} UTC [fsblkstorage] nextBlockBytesAndPlacementInfo -> DEBU 1c0[0m blockbytes [0] read from file [0]
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] ValidateAndPrepare -> DEBU 1c1[0m Validating new block with num trans = [1]
[36mpeer         |[0m {now} [36m{date} {time} UTC [statevalidator] ValidateAndPrepareBatch -> DEBU 1c2[0m New block arrived for validation:&common.Block{{Header:(*common.BlockHeader)(0xc421473800), Data:(*common.BlockData)(0xc4214aff80), Metadata:(*common.BlockMetadata)(0xc4214affc0)}}, doMVCCValidation=true
[36mpeer         |[0m {now} [36m{date} {time} UTC [statevalidator] ValidateAndPrepareBatch -> DEBU 1c3[0m Validating a block with [1] transactions
[36mpeer         |[0m {now} [36m{date} {time} UTC [statevalidator] ValidateAndPrepareBatch -> DEBU 1c4[0m Skipping mvcc validation for Block [0] Transaction index [0] because, the transaction type is [CONFIG]
[36mpeer         |[0m {now} [36m{date} {time} UTC [fsblkstorage] indexBlock -> DEBU 1c5[0m Indexing block [blockNum=0, blockHash=[]byte{{0x7f, 0x73, 0x64, 0x5b, 0x82, 0xa4, 0x19, 0x31, 0x4f, 0xc2, 0x7c, 0x45, 0x1c, 0xa, 0x53, 0xab, 0x9c, 0xae, 0x3b, 0x18, 0x61, 0x68, 0xab, 0x2, 0xbb, 0x1b, 0xa0, 0xf8, 0x2, 0x2e, 0xf8, 0x4e}} txOffsets=
[36mpeer         |[0m {now} txId= locPointer=offset=38, bytesLength=11893
[36mpeer         |[0m {now} ]
[36mpeer         |[0m {now} [36m{date} {time} UTC [fsblkstorage] indexBlock -> DEBU 1c6[0m Adding txLoc [fileSuffixNum=0, offset=38, bytesLength=11893] for tx ID: [] to index
[36mpeer         |[0m {now} [36m{date} {time} UTC [fsblkstorage] indexBlock -> DEBU 1c7[0m Adding txLoc [fileSuffixNum=0, offset=38, bytesLength=11893] for tx number:[0] ID: [] to blockNumTranNum index
[36mpeer         |[0m {now} [36m{date} {time} UTC [fsblkstorage] updateCheckpoint -> DEBU 1c8[0m Broadcasting about update checkpointInfo: latestFileChunkSuffixNum=[0], latestFileChunksize=[11937], isChainEmpty=[false], lastBlockNumber=[0]
[36mpeer         |[0m {now} {date} {time} UTC [kvledger] Commit -> INFO 1c9[0m Channel [myc]: Created block [0] with 1 transaction(s)
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] Commit -> DEBU 1ca[0m Committing updates to state database
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] Commit -> DEBU 1cb[0m Write lock acquired for committing updates to state database
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] Commit -> DEBU 1cc[0m Updates committed to state database
[36mpeer         |[0m {now} [36m{date} {time} UTC [historyleveldb] Commit -> DEBU 1cd[0m Channel [myc]: Updating history database for blockNo [0] with [1] transactions
[36mpeer         |[0m {now} [36m{date} {time} UTC [historyleveldb] Commit -> DEBU 1ce[0m Skipping transaction [0] since it is not an endorsement transaction
[36mpeer         |[0m {now} [36m{date} {time} UTC [historyleveldb] Commit -> DEBU 1cf[0m Channel [myc]: Updates committed to history database for blockNo [0]
[36mpeer         |[0m {now} {date} {time} UTC [ledgermgmt] CreateLedger -> INFO 1d0[0m Created ledger [myc] with genesis block
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/config] NewStandardValues -> DEBU 1d1[0m Initializing protos for *config.ChannelProtos
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/config] initializeProtosStruct -> DEBU 1d2[0m Processing field: HashingAlgorithm
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/config] initializeProtosStruct -> DEBU 1d3[0m Processing field: BlockDataHashingStructure
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/config] initializeProtosStruct -> DEBU 1d4[0m Processing field: OrdererAddresses
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/config] initializeProtosStruct -> DEBU 1d5[0m Processing field: Consortium
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1d6[0m Adding to config map: [Groups] /Channel
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1d7[0m Adding to config map: [Groups] /Channel/Orderer
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1d8[0m Adding to config map: [Groups] /Channel/Orderer/SampleOrg
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1d9[0m Adding to config map: [Values] /Channel/Orderer/SampleOrg/MSP
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1da[0m Adding to config map: [Policy] /Channel/Orderer/SampleOrg/Writers
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1db[0m Adding to config map: [Policy] /Channel/Orderer/SampleOrg/Admins
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1dc[0m Adding to config map: [Policy] /Channel/Orderer/SampleOrg/Readers
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1dd[0m Adding to config map: [Values] /Channel/Orderer/ChannelRestrictions
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1de[0m Adding to config map: [Values] /Channel/Orderer/ConsensusType
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1df[0m Adding to config map: [Values] /Channel/Orderer/BatchSize
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1e0[0m Adding to config map: [Values] /Channel/Orderer/BatchTimeout
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1e1[0m Adding to config map: [Policy] /Channel/Orderer/BlockValidation
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1e2[0m Adding to config map: [Policy] /Channel/Orderer/Readers
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1e3[0m Adding to config map: [Policy] /Channel/Orderer/Writers
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1e4[0m Adding to config map: [Policy] /Channel/Orderer/Admins
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1e5[0m Adding to config map: [Groups] /Channel/Application
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1e6[0m Adding to config map: [Groups] /Channel/Application/SampleOrg
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1e7[0m Adding to config map: [Values] /Channel/Application/SampleOrg/MSP
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1e8[0m Adding to config map: [Policy] /Channel/Application/SampleOrg/Admins
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1e9[0m Adding to config map: [Policy] /Channel/Application/SampleOrg/Readers
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1ea[0m Adding to config map: [Policy] /Channel/Application/SampleOrg/Writers
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1eb[0m Adding to config map: [Policy] /Channel/Application/Readers
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1ec[0m Adding to config map: [Policy] /Channel/Application/Admins
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1ed[0m Adding to config map: [Policy] /Channel/Application/Writers
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1ee[0m Adding to config map: [Values] /Channel/HashingAlgorithm
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1ef[0m Adding to config map: [Values] /Channel/BlockDataHashingStructure
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1f0[0m Adding to config map: [Values] /Channel/Consortium
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1f1[0m Adding to config map: [Values] /Channel/OrdererAddresses
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1f2[0m Adding to config map: [Policy] /Channel/Admins
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1f3[0m Adding to config map: [Policy] /Channel/Readers
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] addToMap -> DEBU 1f4[0m Adding to config map: [Policy] /Channel/Writers
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/configtx] processConfig -> DEBU 1f5[0m Beginning new config for channel myc
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/config] NewStandardValues -> DEBU 1f6[0m Initializing protos for *config.ChannelProtos
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/config] initializeProtosStruct -> DEBU 1f7[0m Processing field: HashingAlgorithm
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/config] initializeProtosStruct -> DEBU 1f8[0m Processing field: BlockDataHashingStructure
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/config] initializeProtosStruct -> DEBU 1f9[0m Processing field: OrdererAddresses
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/config] initializeProtosStruct -> DEBU 1fa[0m Processing field: Consortium
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/config] NewStandardValues -> DEBU 1fb[0m Initializing protos for *struct {{}}
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/config] NewStandardValues -> DEBU 1fc[0m Initializing protos for *config.OrganizationProtos
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/config] initializeProtosStruct -> DEBU 1fd[0m Processing field: MSP
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/config] NewStandardValues -> DEBU 1fe[0m Initializing protos for *config.ApplicationOrgProtos
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/config] initializeProtosStruct -> DEBU 1ff[0m Processing field: AnchorPeers
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/config] NewStandardValues -> DEBU 200[0m Initializing protos for *config.OrganizationProtos
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/config] initializeProtosStruct -> DEBU 201[0m Processing field: MSP
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/config] NewStandardValues -> DEBU 202[0m Initializing protos for *config.OrdererProtos
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/config] initializeProtosStruct -> DEBU 203[0m Processing field: ConsensusType
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/config] initializeProtosStruct -> DEBU 204[0m Processing field: BatchSize
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/config] initializeProtosStruct -> DEBU 205[0m Processing field: BatchTimeout
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/config] initializeProtosStruct -> DEBU 206[0m Processing field: KafkaBrokers
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/config] initializeProtosStruct -> DEBU 207[0m Processing field: ChannelRestrictions
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/config] NewStandardValues -> DEBU 208[0m Initializing protos for *config.OrganizationProtos
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/config] initializeProtosStruct -> DEBU 209[0m Processing field: MSP
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/config] Validate -> DEBU 20a[0m Anchor peers for org SampleOrg are 
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/config] validateMSP -> DEBU 20b[0m Setting up MSP for org SampleOrg
[36mpeer         |[0m {now} [36m{date} {time} UTC [common/config] validateMSP -> DEBU 20c[0m Setting up MSP for org SampleOrg
[36mpeer         |[0m {now} [36m{date} {time} UTC [peer] updateTrustedRoots -> DEBU 20d[0m Updating trusted root authorities for channel myc
[36mpeer         |[0m {now} [36m{date} {time} UTC [deliveryClient] StartDeliverForChannel -> DEBU 20e[0m This peer will pass blocks from orderer service to other peers for channel myc
[36mpeer         |[0m {now} [36m{date} {time} UTC [peer] InitChain -> DEBU 20f[0m Init chain myc
[36mpeer         |[0m {now} [36m{date} {time} UTC [nodeCmd] func2 -> DEBU 210[0m Deploying system CC, for chain <myc>
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] NewTxSimulator -> DEBU 211[0m constructing new tx simulator
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] newLockBasedTxSimulator -> DEBU 212[0m constructing new tx simulator [7d954431-5294-4eb9-adbb-5244302542dd]
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] NewCCContext -> DEBU 213[0m NewCCCC (chain=myc,chaincode=cscc,version=1.0.0,txid=88be5581-7e55-4e39-ac0e-90660ba057bc,syscc=true,proposal=0x0,canname=cscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 214[0m chaincode is running(no need to launch) : cscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 215[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 217[0m chaincode canonical name: cscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 218[0m [88be5581]Inside sendExecuteMessage. Message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 219[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 21a[0m [88be5581]sendExecuteMsg trigger event INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 21b[0m [88be5581]Move state message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 21c[0m [88be5581]Fabric side Handling ChaincodeMessage of type: INIT in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 21d[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 21e[0m [88be5581]sending state message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [deliveryClient] RequestBlocks -> DEBU 216[0m Starting deliver with block [1] for channel myc
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 21f[0m [88be5581]Received message INIT from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 220[0m [88be5581]Handling ChaincodeMessage of type: INIT(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeInit -> DEBU 221[0m Entered state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeInit -> DEBU 222[0m [88be5581]Received INIT, initializing chaincode
[36mpeer         |[0m {now} {date} {time} UTC [cscc] Init -> INFO 223[0m Init CSCC
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 224[0m [88be5581]Init get response status: 200
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 225[0m [88be5581]Init succeeded. Sending COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 226[0m [88be5581]Move state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 227[0m [88be5581]Handling ChaincodeMessage of type: COMPLETED(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 228[0m [88be5581]send state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 229[0m [88be5581]Received message COMPLETED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 22a[0m [88be5581]Fabric side Handling ChaincodeMessage of type: COMPLETED in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 22b[0m [88be5581-7e55-4e39-ac0e-90660ba057bc]HandleMessage- COMPLETED. Notify
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 22c[0m notifying Txid:88be5581-7e55-4e39-ac0e-90660ba057bc
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 22d[0m Exit
[36mpeer         |[0m {now} {date} {time} UTC [sccapi] deploySysCC -> INFO 22e[0m system chaincode cscc/myc(github.com/hyperledger/fabric/core/scc/cscc) deployed
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] Done -> DEBU 22f[0m Done with transaction simulation / query execution [7d954431-5294-4eb9-adbb-5244302542dd]
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] NewTxSimulator -> DEBU 230[0m constructing new tx simulator
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] newLockBasedTxSimulator -> DEBU 231[0m constructing new tx simulator [8892e4af-dfc5-4327-8408-2bf3cfc379dd]
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] NewCCContext -> DEBU 232[0m NewCCCC (chain=myc,chaincode=lscc,version=1.0.0,txid=d3c11da3-437b-4215-95ac-849180b98410,syscc=true,proposal=0x0,canname=lscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 233[0m chaincode is running(no need to launch) : lscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 234[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 235[0m chaincode canonical name: lscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 236[0m [d3c11da3]Inside sendExecuteMessage. Message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 237[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 238[0m [d3c11da3]sendExecuteMsg trigger event INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 239[0m [d3c11da3]Move state message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 23a[0m [d3c11da3]Fabric side Handling ChaincodeMessage of type: INIT in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 23b[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 23c[0m [d3c11da3]sending state message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 23d[0m [d3c11da3]Received message INIT from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 23e[0m [d3c11da3]Handling ChaincodeMessage of type: INIT(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeInit -> DEBU 23f[0m Entered state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeInit -> DEBU 240[0m [d3c11da3]Received INIT, initializing chaincode
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 241[0m [d3c11da3]Init get response status: 200
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 242[0m [d3c11da3]Init succeeded. Sending COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 243[0m [d3c11da3]Move state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 244[0m [d3c11da3]Handling ChaincodeMessage of type: COMPLETED(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 245[0m [d3c11da3]send state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 246[0m [d3c11da3]Received message COMPLETED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 247[0m [d3c11da3]Fabric side Handling ChaincodeMessage of type: COMPLETED in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 248[0m [d3c11da3-437b-4215-95ac-849180b98410]HandleMessage- COMPLETED. Notify
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 249[0m notifying Txid:d3c11da3-437b-4215-95ac-849180b98410
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 24a[0m Exit
[36mpeer         |[0m {now} {date} {time} UTC [sccapi] deploySysCC -> INFO 24b[0m system chaincode lscc/myc(github.com/hyperledger/fabric/core/scc/lscc) deployed
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] Done -> DEBU 24c[0m Done with transaction simulation / query execution [8892e4af-dfc5-4327-8408-2bf3cfc379dd]
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] NewTxSimulator -> DEBU 24d[0m constructing new tx simulator
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] newLockBasedTxSimulator -> DEBU 24e[0m constructing new tx simulator [84809d79-bddc-464f-a02d-74d4631330cf]
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] NewCCContext -> DEBU 24f[0m NewCCCC (chain=myc,chaincode=escc,version=1.0.0,txid=0f157d65-0f44-416d-80f5-89ff0cf5ac5a,syscc=true,proposal=0x0,canname=escc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 250[0m chaincode is running(no need to launch) : escc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 251[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 252[0m chaincode canonical name: escc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 253[0m [0f157d65]Inside sendExecuteMessage. Message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 254[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 255[0m [0f157d65]sendExecuteMsg trigger event INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 256[0m [0f157d65]Move state message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 257[0m [0f157d65]Fabric side Handling ChaincodeMessage of type: INIT in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 258[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 259[0m [0f157d65]sending state message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 25a[0m [0f157d65]Received message INIT from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 25b[0m [0f157d65]Handling ChaincodeMessage of type: INIT(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeInit -> DEBU 25c[0m Entered state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeInit -> DEBU 25d[0m [0f157d65]Received INIT, initializing chaincode
[36mpeer         |[0m {now} {date} {time} UTC [escc] Init -> INFO 25e[0m Successfully initialized ESCC
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 25f[0m [0f157d65]Init get response status: 200
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 260[0m [0f157d65]Init succeeded. Sending COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 261[0m [0f157d65]Move state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 262[0m [0f157d65]Handling ChaincodeMessage of type: COMPLETED(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 263[0m [0f157d65]send state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 264[0m [0f157d65]Received message COMPLETED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 265[0m [0f157d65]Fabric side Handling ChaincodeMessage of type: COMPLETED in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 266[0m [0f157d65-0f44-416d-80f5-89ff0cf5ac5a]HandleMessage- COMPLETED. Notify
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 267[0m notifying Txid:0f157d65-0f44-416d-80f5-89ff0cf5ac5a
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 268[0m Exit
[36mpeer         |[0m {now} {date} {time} UTC [sccapi] deploySysCC -> INFO 269[0m system chaincode escc/myc(github.com/hyperledger/fabric/core/scc/escc) deployed
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] Done -> DEBU 26a[0m Done with transaction simulation / query execution [84809d79-bddc-464f-a02d-74d4631330cf]
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] NewTxSimulator -> DEBU 26b[0m constructing new tx simulator
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] newLockBasedTxSimulator -> DEBU 26c[0m constructing new tx simulator [407a6fdb-b751-438d-8625-995c7a56849f]
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] NewCCContext -> DEBU 26d[0m NewCCCC (chain=myc,chaincode=vscc,version=1.0.0,txid=38558ecd-fd5f-464a-a247-e4a98de2a000,syscc=true,proposal=0x0,canname=vscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 26e[0m chaincode is running(no need to launch) : vscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 26f[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 270[0m chaincode canonical name: vscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 271[0m [38558ecd]Inside sendExecuteMessage. Message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 272[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 273[0m [38558ecd]sendExecuteMsg trigger event INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 274[0m [38558ecd]Move state message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 275[0m [38558ecd]Fabric side Handling ChaincodeMessage of type: INIT in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 276[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 277[0m [38558ecd]sending state message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 278[0m [38558ecd]Received message INIT from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 279[0m [38558ecd]Handling ChaincodeMessage of type: INIT(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeInit -> DEBU 27a[0m Entered state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeInit -> DEBU 27b[0m [38558ecd]Received INIT, initializing chaincode
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 27c[0m [38558ecd]Init get response status: 200
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 27d[0m [38558ecd]Init succeeded. Sending COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 27e[0m [38558ecd]Move state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 27f[0m [38558ecd]Handling ChaincodeMessage of type: COMPLETED(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 280[0m [38558ecd]send state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 281[0m [38558ecd]Received message COMPLETED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 282[0m [38558ecd]Fabric side Handling ChaincodeMessage of type: COMPLETED in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 283[0m [38558ecd-fd5f-464a-a247-e4a98de2a000]HandleMessage- COMPLETED. Notify
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 284[0m notifying Txid:38558ecd-fd5f-464a-a247-e4a98de2a000
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 285[0m Exit
[36mpeer         |[0m {now} {date} {time} UTC [sccapi] deploySysCC -> INFO 286[0m system chaincode vscc/myc(github.com/hyperledger/fabric/core/scc/vscc) deployed
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] Done -> DEBU 287[0m Done with transaction simulation / query execution [407a6fdb-b751-438d-8625-995c7a56849f]
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] NewTxSimulator -> DEBU 288[0m constructing new tx simulator
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] newLockBasedTxSimulator -> DEBU 289[0m constructing new tx simulator [a83178b1-6fdc-46a9-9366-28b4bd92e08b]
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] NewCCContext -> DEBU 28a[0m NewCCCC (chain=myc,chaincode=qscc,version=1.0.0,txid=f6e4ef96-1e55-4d46-a078-71dc97b73923,syscc=true,proposal=0x0,canname=qscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 28b[0m chaincode is running(no need to launch) : qscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 28c[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 28d[0m chaincode canonical name: qscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 28e[0m [f6e4ef96]Inside sendExecuteMessage. Message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 28f[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 290[0m [f6e4ef96]sendExecuteMsg trigger event INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 291[0m [f6e4ef96]Move state message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 292[0m [f6e4ef96]Fabric side Handling ChaincodeMessage of type: INIT in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 293[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 294[0m [f6e4ef96]sending state message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 295[0m [f6e4ef96]Received message INIT from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 296[0m [f6e4ef96]Handling ChaincodeMessage of type: INIT(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeInit -> DEBU 297[0m Entered state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeInit -> DEBU 298[0m [f6e4ef96]Received INIT, initializing chaincode
[36mpeer         |[0m {now} {date} {time} UTC [qscc] Init -> INFO 299[0m Init QSCC
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 29a[0m [f6e4ef96]Init get response status: 200
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 29b[0m [f6e4ef96]Init succeeded. Sending COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 29c[0m [f6e4ef96]Move state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 29d[0m [f6e4ef96]Handling ChaincodeMessage of type: COMPLETED(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 29e[0m [f6e4ef96]send state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 29f[0m [f6e4ef96]Received message COMPLETED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 2a0[0m [f6e4ef96]Fabric side Handling ChaincodeMessage of type: COMPLETED in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 2a1[0m [f6e4ef96-1e55-4d46-a078-71dc97b73923]HandleMessage- COMPLETED. Notify
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 2a2[0m notifying Txid:f6e4ef96-1e55-4d46-a078-71dc97b73923
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 2a3[0m Exit
[36mpeer         |[0m {now} {date} {time} UTC [sccapi] deploySysCC -> INFO 2a4[0m system chaincode qscc/myc(github.com/hyperledger/fabric/core/chaincode/qscc) deployed
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] Done -> DEBU 2a5[0m Done with transaction simulation / query execution [a83178b1-6fdc-46a9-9366-28b4bd92e08b]
[36mpeer         |[0m {now} [36m{date} {time} UTC [eventhub_producer] SendProducerBlockEvent -> DEBU 2a6[0m Entry
[36mpeer         |[0m {now} {date} {time} UTC [eventhub_producer] SendProducerBlockEvent -> INFO 2a7[0m Channel [myc]: Sending event for block number [0]
[36mpeer         |[0m {now} [36m{date} {time} UTC [eventhub_producer] Send -> DEBU 2a8[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [eventhub_producer] Send -> DEBU 2a9[0m Event processor timeout > 0
[36mpeer         |[0m {now} [36m{date} {time} UTC [eventhub_producer] Send -> DEBU 2aa[0m Event sent successfully
[36mpeer         |[0m {now} [36m{date} {time} UTC [eventhub_producer] Send -> DEBU 2ab[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [eventhub_producer] SendProducerBlockEvent -> DEBU 2ac[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 2ad[0m [746b5366]Transaction completed. Sending COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 2ae[0m [746b5366]Move state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 2af[0m [746b5366]Handling ChaincodeMessage of type: COMPLETED(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 2b0[0m [746b5366]send state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 2b1[0m [746b5366]Received message COMPLETED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 2b2[0m [746b5366]Fabric side Handling ChaincodeMessage of type: COMPLETED in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 2b3[0m [746b53668f4d524ad087a094121c3e910d134a3682dcaadd77bc083b7ad3b656]HandleMessage- COMPLETED. Notify
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 2b4[0m notifying Txid:746b53668f4d524ad087a094121c3e910d134a3682dcaadd77bc083b7ad3b656
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 2b5[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] callChaincode -> DEBU 2b6[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] simulateProposal -> DEBU 2b7[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 2b8[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleChaincodeStream -> DEBU 2b9[0m Current context deadline = 0001-01-01 00:00:00 +0000 UTC, ok = false
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 2ba[0m []Received message REGISTER from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 2bb[0m []Fabric side Handling ChaincodeMessage of type: REGISTER in state created
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] beforeRegisterEvent -> DEBU 2bc[0m Received REGISTER in state created
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] registerHandler -> DEBU 2bd[0m registered handler complete for chaincode mycc:0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] beforeRegisterEvent -> DEBU 2be[0m Got REGISTER for chaincodeID = name:"mycc:0" , sending back REGISTERED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notifyDuringStartup -> DEBU 2bf[0m nothing to notify (dev mode ?)
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notifyDuringStartup -> DEBU 2c0[0m sending READY
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 2c1[0m []Move state message READY
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 2c2[0m []Fabric side Handling ChaincodeMessage of type: READY in state established
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] enterReadyState -> DEBU 2c3[0m []Entered state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 2c4[0m notifier Txid: does not exist
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 2c5[0m []sending state message READY
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 2c6[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] ValidateProposalMessage -> DEBU 2c7[0m ValidateProposalMessage starts for signed proposal 0xc421a7fa70
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChannelHeader -> DEBU 2c8[0m validateChannelHeader info: header type 3
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 2c9[0m checkSignatureFromCreator starts
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 2ca[0m checkSignatureFromCreator info: creator is &{{DEFAULT 08d3cb7b7e7aa9b1e001378aa0ce558053e7785c68402348fc7c72b290ac10c4}}
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 2cb[0m checkSignatureFromCreator info: creator is valid
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 2cc[0m checkSignatureFromCreator exists successfully
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChaincodeProposalMessage -> DEBU 2cd[0m validateChaincodeProposalMessage starts for proposal 0xc421a885f0, header 0xc421a7faa0
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChaincodeProposalMessage -> DEBU 2ce[0m validateChaincodeProposalMessage info: header extension references chaincode name:"cscc" 
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 2cf[0m processing txid: 1f587d2dc9ff00dfc4a7971e3f804c5befdf3d6f4a65a2e77822f878a02671bf
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] simulateProposal -> DEBU 2d0[0m Entry - txid: 1f587d2dc9ff00dfc4a7971e3f804c5befdf3d6f4a65a2e77822f878a02671bf channel id: 
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] callChaincode -> DEBU 2d1[0m Entry - txid: 1f587d2dc9ff00dfc4a7971e3f804c5befdf3d6f4a65a2e77822f878a02671bf channel id:  version: 1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] NewCCContext -> DEBU 2d2[0m NewCCCC (chain=,chaincode=cscc,version=1.0.0,txid=1f587d2dc9ff00dfc4a7971e3f804c5befdf3d6f4a65a2e77822f878a02671bf,syscc=true,proposal=0xc421a885f0,canname=cscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 2d3[0m chaincode is running(no need to launch) : cscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 2d4[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 2d5[0m chaincode canonical name: cscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 2d6[0m [1f587d2d]Inside sendExecuteMessage. Message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 2d7[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 2d8[0m Proposal different from nil. Creating chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 2d9[0m [1f587d2d]sendExecuteMsg trigger event TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 2da[0m [1f587d2d]Move state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 2db[0m [1f587d2d]Fabric side Handling ChaincodeMessage of type: TRANSACTION in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 2dc[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 2dd[0m [1f587d2d]sending state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 2de[0m [1f587d2d]Received message TRANSACTION from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 2df[0m [1f587d2d]Handling ChaincodeMessage of type: TRANSACTION(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeTransaction -> DEBU 2e0[0m [1f587d2d]Received TRANSACTION, invoking transaction on chaincode(Src:ready, Dst:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [cscc] Invoke -> DEBU 2e1[0m Invoke function: GetChannels
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 2e2[0m [1f587d2d]Transaction completed. Sending COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 2e3[0m [1f587d2d]Move state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 2e4[0m [1f587d2d]Handling ChaincodeMessage of type: COMPLETED(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 2e5[0m [1f587d2d]send state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 2e6[0m [1f587d2d]Received message COMPLETED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 2e7[0m [1f587d2d]Fabric side Handling ChaincodeMessage of type: COMPLETED in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 2e8[0m [1f587d2dc9ff00dfc4a7971e3f804c5befdf3d6f4a65a2e77822f878a02671bf]HandleMessage- COMPLETED. Notify
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 2e9[0m notifying Txid:1f587d2dc9ff00dfc4a7971e3f804c5befdf3d6f4a65a2e77822f878a02671bf
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 2ea[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] callChaincode -> DEBU 2eb[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] simulateProposal -> DEBU 2ec[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 2ed[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 2ee[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] ValidateProposalMessage -> DEBU 2ef[0m ValidateProposalMessage starts for signed proposal 0xc421a8f410
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChannelHeader -> DEBU 2f0[0m validateChannelHeader info: header type 1
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 2f1[0m checkSignatureFromCreator starts
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 2f2[0m checkSignatureFromCreator info: creator is &{{DEFAULT 08d3cb7b7e7aa9b1e001378aa0ce558053e7785c68402348fc7c72b290ac10c4}}
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 2f3[0m checkSignatureFromCreator info: creator is valid
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 2f4[0m checkSignatureFromCreator exists successfully
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChaincodeProposalMessage -> DEBU 2f5[0m validateChaincodeProposalMessage starts for proposal 0xc421c5b400, header 0xc421a8f470
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChaincodeProposalMessage -> DEBU 2f6[0m validateChaincodeProposalMessage info: header extension references chaincode name:"cscc" 
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 2f7[0m processing txid: 2ed9359d4a9525f5a6d907d1322bc23dcc910f009faa453525c9bde23b44c4fd
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] simulateProposal -> DEBU 2f8[0m Entry - txid: 2ed9359d4a9525f5a6d907d1322bc23dcc910f009faa453525c9bde23b44c4fd channel id: 
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] callChaincode -> DEBU 2f9[0m Entry - txid: 2ed9359d4a9525f5a6d907d1322bc23dcc910f009faa453525c9bde23b44c4fd channel id:  version: 1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] NewCCContext -> DEBU 2fa[0m NewCCCC (chain=,chaincode=cscc,version=1.0.0,txid=2ed9359d4a9525f5a6d907d1322bc23dcc910f009faa453525c9bde23b44c4fd,syscc=true,proposal=0xc421c5b400,canname=cscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 2fb[0m chaincode is running(no need to launch) : cscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 2fc[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 2fd[0m chaincode canonical name: cscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 2fe[0m [2ed9359d]Inside sendExecuteMessage. Message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 2ff[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 300[0m Proposal different from nil. Creating chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 301[0m [2ed9359d]sendExecuteMsg trigger event TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 302[0m [2ed9359d]Move state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 303[0m [2ed9359d]Fabric side Handling ChaincodeMessage of type: TRANSACTION in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 304[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 305[0m [2ed9359d]sending state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 306[0m [2ed9359d]Received message TRANSACTION from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 307[0m [2ed9359d]Handling ChaincodeMessage of type: TRANSACTION(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeTransaction -> DEBU 308[0m [2ed9359d]Received TRANSACTION, invoking transaction on chaincode(Src:ready, Dst:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [cscc] Invoke -> DEBU 309[0m Invoke function: GetConfigBlock
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 30a[0m [2ed9359d]Transaction completed. Sending COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 30b[0m [2ed9359d]Move state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 30c[0m [2ed9359d]Handling ChaincodeMessage of type: COMPLETED(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 30d[0m [2ed9359d]send state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 30e[0m [2ed9359d]Received message COMPLETED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 30f[0m [2ed9359d]Fabric side Handling ChaincodeMessage of type: COMPLETED in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 310[0m [2ed9359d4a9525f5a6d907d1322bc23dcc910f009faa453525c9bde23b44c4fd]HandleMessage- COMPLETED. Notify
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 311[0m notifying Txid:2ed9359d4a9525f5a6d907d1322bc23dcc910f009faa453525c9bde23b44c4fd
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 312[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] callChaincode -> DEBU 313[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] simulateProposal -> DEBU 314[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 315[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 316[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] ValidateProposalMessage -> DEBU 317[0m ValidateProposalMessage starts for signed proposal 0xc42152f140
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChannelHeader -> DEBU 318[0m validateChannelHeader info: header type 3
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 319[0m checkSignatureFromCreator starts
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 31a[0m checkSignatureFromCreator info: creator is &{{DEFAULT 08d3cb7b7e7aa9b1e001378aa0ce558053e7785c68402348fc7c72b290ac10c4}}
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 31b[0m checkSignatureFromCreator info: creator is valid
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 31c[0m checkSignatureFromCreator exists successfully
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChaincodeProposalMessage -> DEBU 31d[0m validateChaincodeProposalMessage starts for proposal 0xc421a890e0, header 0xc42152f1a0
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChaincodeProposalMessage -> DEBU 31e[0m validateChaincodeProposalMessage info: header extension references chaincode name:"lscc" 
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 31f[0m processing txid: 9cbdb1e5861a4f1a3e01733ef072b180e791dc0a559a147813b13af30e9166c7
[36mpeer         |[0m {now} [36m{date} {time} UTC [fsblkstorage] retrieveTransactionByID -> DEBU 320[0m retrieveTransactionByID() - txId = [9cbdb1e5861a4f1a3e01733ef072b180e791dc0a559a147813b13af30e9166c7]
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] NewTxSimulator -> DEBU 321[0m constructing new tx simulator
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] newLockBasedTxSimulator -> DEBU 322[0m constructing new tx simulator [cac5d8b9-adf2-4d5f-b188-1f69e83c2f63]
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] simulateProposal -> DEBU 323[0m Entry - txid: 9cbdb1e5861a4f1a3e01733ef072b180e791dc0a559a147813b13af30e9166c7 channel id: myc
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] callChaincode -> DEBU 324[0m Entry - txid: 9cbdb1e5861a4f1a3e01733ef072b180e791dc0a559a147813b13af30e9166c7 channel id: myc version: 1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] NewCCContext -> DEBU 325[0m NewCCCC (chain=myc,chaincode=lscc,version=1.0.0,txid=9cbdb1e5861a4f1a3e01733ef072b180e791dc0a559a147813b13af30e9166c7,syscc=true,proposal=0xc421a890e0,canname=lscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 326[0m chaincode is running(no need to launch) : lscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 327[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 328[0m chaincode canonical name: lscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 329[0m [9cbdb1e5]Inside sendExecuteMessage. Message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 32a[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 32b[0m Proposal different from nil. Creating chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 32c[0m [9cbdb1e5]sendExecuteMsg trigger event TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 32d[0m [9cbdb1e5]Move state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 32e[0m [9cbdb1e5]Fabric side Handling ChaincodeMessage of type: TRANSACTION in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 32f[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 330[0m [9cbdb1e5]sending state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 331[0m [9cbdb1e5]Received message TRANSACTION from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 332[0m [9cbdb1e5]Handling ChaincodeMessage of type: TRANSACTION(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeTransaction -> DEBU 333[0m [9cbdb1e5]Received TRANSACTION, invoking transaction on chaincode(Src:ready, Dst:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleGetState -> DEBU 334[0m [9cbdb1e5]Sending GET_STATE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 335[0m [9cbdb1e5]Received message GET_STATE from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 336[0m [9cbdb1e5]Fabric side Handling ChaincodeMessage of type: GET_STATE in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] afterGetState -> DEBU 337[0m [9cbdb1e5]Received GET_STATE, invoking get state from ledger
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 338[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] func1 -> DEBU 339[0m [9cbdb1e5] getting state for chaincode lscc, key mycc, channel myc
[36mpeer         |[0m {now} [36m{date} {time} UTC [stateleveldb] GetState -> DEBU 33a[0m GetState(). ns=lscc, key=mycc
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] func1 -> DEBU 33b[0m [9cbdb1e5]No state associated with key: mycc. Sending RESPONSE with an empty payload
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] 1 -> DEBU 33c[0m [9cbdb1e5]handleGetState serial send RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 33d[0m [9cbdb1e5]Received message RESPONSE from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 33e[0m [9cbdb1e5]Handling ChaincodeMessage of type: RESPONSE(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] sendChannel -> DEBU 33f[0m [9cbdb1e5]before send
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] sendChannel -> DEBU 340[0m [9cbdb1e5]after send
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] afterResponse -> DEBU 341[0m [9cbdb1e5]Received RESPONSE, communicated (state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleGetState -> DEBU 342[0m [9cbdb1e5]GetState received payload RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 343[0m [9cbdb1e5]Transaction completed. Sending COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 344[0m [9cbdb1e5]Move state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 345[0m [9cbdb1e5]Handling ChaincodeMessage of type: COMPLETED(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 346[0m [9cbdb1e5]send state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 347[0m [9cbdb1e5]Received message COMPLETED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 348[0m [9cbdb1e5]Fabric side Handling ChaincodeMessage of type: COMPLETED in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 349[0m [9cbdb1e5861a4f1a3e01733ef072b180e791dc0a559a147813b13af30e9166c7]HandleMessage- COMPLETED. Notify
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 34a[0m notifying Txid:9cbdb1e5861a4f1a3e01733ef072b180e791dc0a559a147813b13af30e9166c7
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 34b[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] callChaincode -> DEBU 34c[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] GetTxSimulationResults -> DEBU 34d[0m Simulation completed, getting simulation results
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] Done -> DEBU 34e[0m Done with transaction simulation / query execution [cac5d8b9-adf2-4d5f-b188-1f69e83c2f63]
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] simulateProposal -> DEBU 34f[0m Exit
[36mpeer         |[0m {now} [31m{date} {time} UTC [endorser] ProcessProposal -> ERRO 350[0m simulateProposal() resulted in chaincode response status 500 for txid: 9cbdb1e5861a4f1a3e01733ef072b180e791dc0a559a147813b13af30e9166c7
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] Done -> DEBU 351[0m Done with transaction simulation / query execution [cac5d8b9-adf2-4d5f-b188-1f69e83c2f63]
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 352[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 353[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] ValidateProposalMessage -> DEBU 354[0m ValidateProposalMessage starts for signed proposal 0xc421ac7e60
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChannelHeader -> DEBU 355[0m validateChannelHeader info: header type 1
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 356[0m checkSignatureFromCreator starts
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 357[0m checkSignatureFromCreator info: creator is &{{DEFAULT 08d3cb7b7e7aa9b1e001378aa0ce558053e7785c68402348fc7c72b290ac10c4}}
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 358[0m checkSignatureFromCreator info: creator is valid
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 359[0m checkSignatureFromCreator exists successfully
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChaincodeProposalMessage -> DEBU 35a[0m validateChaincodeProposalMessage starts for proposal 0xc4203383c0, header 0xc421ac7ec0
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChaincodeProposalMessage -> DEBU 35b[0m validateChaincodeProposalMessage info: header extension references chaincode name:"cscc" 
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 35c[0m processing txid: 5955e0cf6ca46d92034a526994eae4460da7be312a23311efde852c8f19a38d8
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] simulateProposal -> DEBU 35d[0m Entry - txid: 5955e0cf6ca46d92034a526994eae4460da7be312a23311efde852c8f19a38d8 channel id: 
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] callChaincode -> DEBU 35e[0m Entry - txid: 5955e0cf6ca46d92034a526994eae4460da7be312a23311efde852c8f19a38d8 channel id:  version: 1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] NewCCContext -> DEBU 35f[0m NewCCCC (chain=,chaincode=cscc,version=1.0.0,txid=5955e0cf6ca46d92034a526994eae4460da7be312a23311efde852c8f19a38d8,syscc=true,proposal=0xc4203383c0,canname=cscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 360[0m chaincode is running(no need to launch) : cscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 361[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 362[0m chaincode canonical name: cscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 363[0m [5955e0cf]Inside sendExecuteMessage. Message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 364[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 365[0m Proposal different from nil. Creating chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 366[0m [5955e0cf]sendExecuteMsg trigger event TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 367[0m [5955e0cf]Move state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 368[0m [5955e0cf]Fabric side Handling ChaincodeMessage of type: TRANSACTION in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 369[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 36a[0m [5955e0cf]sending state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 36b[0m [5955e0cf]Received message TRANSACTION from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 36c[0m [5955e0cf]Handling ChaincodeMessage of type: TRANSACTION(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeTransaction -> DEBU 36d[0m [5955e0cf]Received TRANSACTION, invoking transaction on chaincode(Src:ready, Dst:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [cscc] Invoke -> DEBU 36e[0m Invoke function: GetConfigBlock
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 36f[0m [5955e0cf]Transaction completed. Sending COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 370[0m [5955e0cf]Move state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 371[0m [5955e0cf]Handling ChaincodeMessage of type: COMPLETED(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 372[0m [5955e0cf]send state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 373[0m [5955e0cf]Received message COMPLETED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 374[0m [5955e0cf]Fabric side Handling ChaincodeMessage of type: COMPLETED in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 375[0m [5955e0cf6ca46d92034a526994eae4460da7be312a23311efde852c8f19a38d8]HandleMessage- COMPLETED. Notify
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 376[0m notifying Txid:5955e0cf6ca46d92034a526994eae4460da7be312a23311efde852c8f19a38d8
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 377[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] callChaincode -> DEBU 378[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] simulateProposal -> DEBU 379[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 37a[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 37b[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] ValidateProposalMessage -> DEBU 37c[0m ValidateProposalMessage starts for signed proposal 0xc42162ef00
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChannelHeader -> DEBU 37d[0m validateChannelHeader info: header type 3
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 37e[0m checkSignatureFromCreator starts
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 37f[0m checkSignatureFromCreator info: creator is &{{DEFAULT 08d3cb7b7e7aa9b1e001378aa0ce558053e7785c68402348fc7c72b290ac10c4}}
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 380[0m checkSignatureFromCreator info: creator is valid
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 381[0m checkSignatureFromCreator exists successfully
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChaincodeProposalMessage -> DEBU 382[0m validateChaincodeProposalMessage starts for proposal 0xc4214b0ff0, header 0xc42162ef30
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChaincodeProposalMessage -> DEBU 383[0m validateChaincodeProposalMessage info: header extension references chaincode name:"lscc" 
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 384[0m processing txid: 386818227bb7a60e73f05c1a0f9be9cf985e262005634c1bae921b3374f44d34
[36mpeer         |[0m {now} [36m{date} {time} UTC [fsblkstorage] retrieveTransactionByID -> DEBU 385[0m retrieveTransactionByID() - txId = [386818227bb7a60e73f05c1a0f9be9cf985e262005634c1bae921b3374f44d34]
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] NewTxSimulator -> DEBU 386[0m constructing new tx simulator
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] newLockBasedTxSimulator -> DEBU 387[0m constructing new tx simulator [871ea1e3-df31-4b70-a0cb-718fd94173a1]
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] simulateProposal -> DEBU 388[0m Entry - txid: 386818227bb7a60e73f05c1a0f9be9cf985e262005634c1bae921b3374f44d34 channel id: myc
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] callChaincode -> DEBU 389[0m Entry - txid: 386818227bb7a60e73f05c1a0f9be9cf985e262005634c1bae921b3374f44d34 channel id: myc version: 1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] NewCCContext -> DEBU 38a[0m NewCCCC (chain=myc,chaincode=lscc,version=1.0.0,txid=386818227bb7a60e73f05c1a0f9be9cf985e262005634c1bae921b3374f44d34,syscc=true,proposal=0xc4214b0ff0,canname=lscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 38b[0m chaincode is running(no need to launch) : lscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 38c[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 38d[0m chaincode canonical name: lscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 38e[0m [38681822]Inside sendExecuteMessage. Message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 38f[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 390[0m Proposal different from nil. Creating chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 391[0m [38681822]sendExecuteMsg trigger event TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 392[0m [38681822]Move state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 393[0m [38681822]Fabric side Handling ChaincodeMessage of type: TRANSACTION in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 394[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 395[0m [38681822]sending state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 396[0m [38681822]Received message TRANSACTION from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 397[0m [38681822]Handling ChaincodeMessage of type: TRANSACTION(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeTransaction -> DEBU 398[0m [38681822]Received TRANSACTION, invoking transaction on chaincode(Src:ready, Dst:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleGetState -> DEBU 399[0m [38681822]Sending GET_STATE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 39a[0m [38681822]Received message GET_STATE from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 39b[0m [38681822]Fabric side Handling ChaincodeMessage of type: GET_STATE in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] afterGetState -> DEBU 39c[0m [38681822]Received GET_STATE, invoking get state from ledger
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 39d[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] func1 -> DEBU 39e[0m [38681822] getting state for chaincode lscc, key mycc, channel myc
[36mpeer         |[0m {now} [36m{date} {time} UTC [stateleveldb] GetState -> DEBU 39f[0m GetState(). ns=lscc, key=mycc
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] func1 -> DEBU 3a0[0m [38681822]No state associated with key: mycc. Sending RESPONSE with an empty payload
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] 1 -> DEBU 3a1[0m [38681822]handleGetState serial send RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 3a2[0m [38681822]Received message RESPONSE from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 3a3[0m [38681822]Handling ChaincodeMessage of type: RESPONSE(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] sendChannel -> DEBU 3a4[0m [38681822]before send
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] sendChannel -> DEBU 3a5[0m [38681822]after send
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] afterResponse -> DEBU 3a6[0m [38681822]Received RESPONSE, communicated (state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleGetState -> DEBU 3a7[0m [38681822]GetState received payload RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 3a8[0m [38681822]Transaction completed. Sending COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 3a9[0m [38681822]Move state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 3aa[0m [38681822]Handling ChaincodeMessage of type: COMPLETED(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 3ab[0m [38681822]send state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 3ac[0m [38681822]Received message COMPLETED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 3ad[0m [38681822]Fabric side Handling ChaincodeMessage of type: COMPLETED in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 3ae[0m [386818227bb7a60e73f05c1a0f9be9cf985e262005634c1bae921b3374f44d34]HandleMessage- COMPLETED. Notify
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 3af[0m notifying Txid:386818227bb7a60e73f05c1a0f9be9cf985e262005634c1bae921b3374f44d34
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 3b0[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] callChaincode -> DEBU 3b1[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] GetTxSimulationResults -> DEBU 3b2[0m Simulation completed, getting simulation results
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] Done -> DEBU 3b3[0m Done with transaction simulation / query execution [871ea1e3-df31-4b70-a0cb-718fd94173a1]
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] simulateProposal -> DEBU 3b4[0m Exit
[36mpeer         |[0m {now} [31m{date} {time} UTC [endorser] ProcessProposal -> ERRO 3b5[0m simulateProposal() resulted in chaincode response status 500 for txid: 386818227bb7a60e73f05c1a0f9be9cf985e262005634c1bae921b3374f44d34
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] Done -> DEBU 3b6[0m Done with transaction simulation / query execution [871ea1e3-df31-4b70-a0cb-718fd94173a1]
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 3b7[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 3b8[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] ValidateProposalMessage -> DEBU 3b9[0m ValidateProposalMessage starts for signed proposal 0xc4215155f0
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChannelHeader -> DEBU 3ba[0m validateChannelHeader info: header type 3
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 3bb[0m checkSignatureFromCreator starts
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 3bc[0m checkSignatureFromCreator info: creator is &{{DEFAULT 08d3cb7b7e7aa9b1e001378aa0ce558053e7785c68402348fc7c72b290ac10c4}}
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 3bd[0m checkSignatureFromCreator info: creator is valid
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 3be[0m checkSignatureFromCreator exists successfully
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChaincodeProposalMessage -> DEBU 3bf[0m validateChaincodeProposalMessage starts for proposal 0xc4215242d0, header 0xc421515620
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChaincodeProposalMessage -> DEBU 3c0[0m validateChaincodeProposalMessage info: header extension references chaincode name:"lscc" 
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 3c1[0m processing txid: 6a23d430f5cf731540e6e6192684a3b9f903bc9ffd536a6fe77d8bae52cc9ffa
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] simulateProposal -> DEBU 3c2[0m Entry - txid: 6a23d430f5cf731540e6e6192684a3b9f903bc9ffd536a6fe77d8bae52cc9ffa channel id: 
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] callChaincode -> DEBU 3c3[0m Entry - txid: 6a23d430f5cf731540e6e6192684a3b9f903bc9ffd536a6fe77d8bae52cc9ffa channel id:  version: 1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] NewCCContext -> DEBU 3c4[0m NewCCCC (chain=,chaincode=lscc,version=1.0.0,txid=6a23d430f5cf731540e6e6192684a3b9f903bc9ffd536a6fe77d8bae52cc9ffa,syscc=true,proposal=0xc4215242d0,canname=lscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 3c5[0m chaincode is running(no need to launch) : lscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 3c6[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 3c7[0m chaincode canonical name: lscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 3c8[0m [6a23d430]Inside sendExecuteMessage. Message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 3c9[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 3ca[0m Proposal different from nil. Creating chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 3cb[0m [6a23d430]sendExecuteMsg trigger event TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 3cc[0m [6a23d430]Move state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 3cd[0m [6a23d430]Fabric side Handling ChaincodeMessage of type: TRANSACTION in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 3ce[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 3cf[0m [6a23d430]sending state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 3d0[0m [6a23d430]Received message TRANSACTION from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 3d1[0m [6a23d430]Handling ChaincodeMessage of type: TRANSACTION(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeTransaction -> DEBU 3d2[0m [6a23d430]Received TRANSACTION, invoking transaction on chaincode(Src:ready, Dst:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 3d3[0m [6a23d430]Transaction completed. Sending COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 3d4[0m [6a23d430]Move state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 3d5[0m [6a23d430]Handling ChaincodeMessage of type: COMPLETED(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 3d6[0m [6a23d430]send state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 3d7[0m [6a23d430]Received message COMPLETED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 3d8[0m [6a23d430]Fabric side Handling ChaincodeMessage of type: COMPLETED in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 3d9[0m [6a23d430f5cf731540e6e6192684a3b9f903bc9ffd536a6fe77d8bae52cc9ffa]HandleMessage- COMPLETED. Notify
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 3da[0m notifying Txid:6a23d430f5cf731540e6e6192684a3b9f903bc9ffd536a6fe77d8bae52cc9ffa
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 3db[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] callChaincode -> DEBU 3dc[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] simulateProposal -> DEBU 3dd[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 3de[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 3df[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] ValidateProposalMessage -> DEBU 3e0[0m ValidateProposalMessage starts for signed proposal 0xc4215ad8f0
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChannelHeader -> DEBU 3e1[0m validateChannelHeader info: header type 1
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 3e2[0m checkSignatureFromCreator starts
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 3e3[0m checkSignatureFromCreator info: creator is &{{DEFAULT 08d3cb7b7e7aa9b1e001378aa0ce558053e7785c68402348fc7c72b290ac10c4}}
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 3e4[0m checkSignatureFromCreator info: creator is valid
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 3e5[0m checkSignatureFromCreator exists successfully
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChaincodeProposalMessage -> DEBU 3e6[0m validateChaincodeProposalMessage starts for proposal 0xc421c5e910, header 0xc4215ad950
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChaincodeProposalMessage -> DEBU 3e7[0m validateChaincodeProposalMessage info: header extension references chaincode name:"cscc" 
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 3e8[0m processing txid: 092cf58e37dda5b09fdf0b20e289303cb84fa9362b62d0acfbdcff3cd464e90e
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] simulateProposal -> DEBU 3e9[0m Entry - txid: 092cf58e37dda5b09fdf0b20e289303cb84fa9362b62d0acfbdcff3cd464e90e channel id: 
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] callChaincode -> DEBU 3ea[0m Entry - txid: 092cf58e37dda5b09fdf0b20e289303cb84fa9362b62d0acfbdcff3cd464e90e channel id:  version: 1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] NewCCContext -> DEBU 3eb[0m NewCCCC (chain=,chaincode=cscc,version=1.0.0,txid=092cf58e37dda5b09fdf0b20e289303cb84fa9362b62d0acfbdcff3cd464e90e,syscc=true,proposal=0xc421c5e910,canname=cscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 3ec[0m chaincode is running(no need to launch) : cscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 3ed[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 3ee[0m chaincode canonical name: cscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 3ef[0m [092cf58e]Inside sendExecuteMessage. Message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 3f0[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 3f1[0m Proposal different from nil. Creating chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 3f2[0m [092cf58e]sendExecuteMsg trigger event TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 3f3[0m [092cf58e]Move state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 3f4[0m [092cf58e]Fabric side Handling ChaincodeMessage of type: TRANSACTION in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 3f5[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 3f6[0m [092cf58e]sending state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 3f7[0m [092cf58e]Received message TRANSACTION from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 3f8[0m [092cf58e]Handling ChaincodeMessage of type: TRANSACTION(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeTransaction -> DEBU 3f9[0m [092cf58e]Received TRANSACTION, invoking transaction on chaincode(Src:ready, Dst:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [cscc] Invoke -> DEBU 3fa[0m Invoke function: GetConfigBlock
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 3fb[0m [092cf58e]Transaction completed. Sending COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 3fc[0m [092cf58e]Move state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 3fd[0m [092cf58e]Handling ChaincodeMessage of type: COMPLETED(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 3fe[0m [092cf58e]send state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 3ff[0m [092cf58e]Received message COMPLETED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 400[0m [092cf58e]Fabric side Handling ChaincodeMessage of type: COMPLETED in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 401[0m [092cf58e37dda5b09fdf0b20e289303cb84fa9362b62d0acfbdcff3cd464e90e]HandleMessage- COMPLETED. Notify
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 402[0m notifying Txid:092cf58e37dda5b09fdf0b20e289303cb84fa9362b62d0acfbdcff3cd464e90e
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 403[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] callChaincode -> DEBU 404[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] simulateProposal -> DEBU 405[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 406[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 407[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] ValidateProposalMessage -> DEBU 408[0m ValidateProposalMessage starts for signed proposal 0xc42154ea80
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChannelHeader -> DEBU 409[0m validateChannelHeader info: header type 3
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 40a[0m checkSignatureFromCreator starts
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 40b[0m checkSignatureFromCreator info: creator is &{{DEFAULT 08d3cb7b7e7aa9b1e001378aa0ce558053e7785c68402348fc7c72b290ac10c4}}
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 40c[0m checkSignatureFromCreator info: creator is valid
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 40d[0m checkSignatureFromCreator exists successfully
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChaincodeProposalMessage -> DEBU 40e[0m validateChaincodeProposalMessage starts for proposal 0xc4215583c0, header 0xc42154eab0
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChaincodeProposalMessage -> DEBU 40f[0m validateChaincodeProposalMessage info: header extension references chaincode name:"lscc" 
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 410[0m processing txid: 23f51cb067b64bd62d493e50aaae37cd4211db1796e11e4669404ad72555320b
[36mpeer         |[0m {now} [36m{date} {time} UTC [fsblkstorage] retrieveTransactionByID -> DEBU 411[0m retrieveTransactionByID() - txId = [23f51cb067b64bd62d493e50aaae37cd4211db1796e11e4669404ad72555320b]
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] NewTxSimulator -> DEBU 412[0m constructing new tx simulator
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] newLockBasedTxSimulator -> DEBU 413[0m constructing new tx simulator [d00a9e39-8c3b-47ad-91d4-d190b9990f96]
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] simulateProposal -> DEBU 414[0m Entry - txid: 23f51cb067b64bd62d493e50aaae37cd4211db1796e11e4669404ad72555320b channel id: myc
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] callChaincode -> DEBU 415[0m Entry - txid: 23f51cb067b64bd62d493e50aaae37cd4211db1796e11e4669404ad72555320b channel id: myc version: 1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] NewCCContext -> DEBU 416[0m NewCCCC (chain=myc,chaincode=lscc,version=1.0.0,txid=23f51cb067b64bd62d493e50aaae37cd4211db1796e11e4669404ad72555320b,syscc=true,proposal=0xc4215583c0,canname=lscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 417[0m chaincode is running(no need to launch) : lscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 418[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 419[0m chaincode canonical name: lscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 41a[0m [23f51cb0]Inside sendExecuteMessage. Message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 41b[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 41c[0m Proposal different from nil. Creating chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 41d[0m [23f51cb0]sendExecuteMsg trigger event TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 41e[0m [23f51cb0]Move state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 41f[0m [23f51cb0]Fabric side Handling ChaincodeMessage of type: TRANSACTION in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 420[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 421[0m [23f51cb0]sending state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 422[0m [23f51cb0]Received message TRANSACTION from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 423[0m [23f51cb0]Handling ChaincodeMessage of type: TRANSACTION(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeTransaction -> DEBU 424[0m [23f51cb0]Received TRANSACTION, invoking transaction on chaincode(Src:ready, Dst:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleGetState -> DEBU 425[0m [23f51cb0]Sending GET_STATE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 426[0m [23f51cb0]Received message GET_STATE from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 427[0m [23f51cb0]Fabric side Handling ChaincodeMessage of type: GET_STATE in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] afterGetState -> DEBU 428[0m [23f51cb0]Received GET_STATE, invoking get state from ledger
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 429[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] func1 -> DEBU 42a[0m [23f51cb0] getting state for chaincode lscc, key mycc, channel myc
[36mpeer         |[0m {now} [36m{date} {time} UTC [stateleveldb] GetState -> DEBU 42b[0m GetState(). ns=lscc, key=mycc
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] func1 -> DEBU 42c[0m [23f51cb0]No state associated with key: mycc. Sending RESPONSE with an empty payload
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] 1 -> DEBU 42d[0m [23f51cb0]handleGetState serial send RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 42e[0m [23f51cb0]Received message RESPONSE from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 42f[0m [23f51cb0]Handling ChaincodeMessage of type: RESPONSE(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] sendChannel -> DEBU 430[0m [23f51cb0]before send
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] sendChannel -> DEBU 431[0m [23f51cb0]after send
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] afterResponse -> DEBU 432[0m [23f51cb0]Received RESPONSE, communicated (state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleGetState -> DEBU 433[0m [23f51cb0]GetState received payload RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handlePutState -> DEBU 434[0m [23f51cb0]Inside putstate
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handlePutState -> DEBU 435[0m [23f51cb0]Sending PUT_STATE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 436[0m [23f51cb0]Received message PUT_STATE from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 437[0m [23f51cb0]Fabric side Handling ChaincodeMessage of type: PUT_STATE in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 438[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] func1 -> DEBU 439[0m [23f51cb0]state is ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] func1 -> DEBU 43a[0m [23f51cb0]Completed PUT_STATE. Sending RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] 1 -> DEBU 43b[0m [23f51cb0]enterBusyState trigger event RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 43c[0m [23f51cb0]Move state message RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 43d[0m [23f51cb0]Fabric side Handling ChaincodeMessage of type: RESPONSE in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 43e[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 43f[0m [23f51cb0]sending state message RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 440[0m [23f51cb0]Received message RESPONSE from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 441[0m [23f51cb0]Handling ChaincodeMessage of type: RESPONSE(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] sendChannel -> DEBU 442[0m [23f51cb0]before send
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] sendChannel -> DEBU 443[0m [23f51cb0]after send
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] afterResponse -> DEBU 444[0m [23f51cb0]Received RESPONSE, communicated (state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handlePutState -> DEBU 445[0m [23f51cb0]Received RESPONSE. Successfully updated state
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 446[0m [23f51cb0]Transaction completed. Sending COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 447[0m [23f51cb0]Move state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 448[0m [23f51cb0]Handling ChaincodeMessage of type: COMPLETED(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 449[0m [23f51cb0]send state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 44a[0m [23f51cb0]Received message COMPLETED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 44b[0m [23f51cb0]Fabric side Handling ChaincodeMessage of type: COMPLETED in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 44c[0m [23f51cb067b64bd62d493e50aaae37cd4211db1796e11e4669404ad72555320b]HandleMessage- COMPLETED. Notify
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 44d[0m notifying Txid:23f51cb067b64bd62d493e50aaae37cd4211db1796e11e4669404ad72555320b
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 44e[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] NewCCContext -> DEBU 44f[0m NewCCCC (chain=myc,chaincode=mycc,version=0,txid=23f51cb067b64bd62d493e50aaae37cd4211db1796e11e4669404ad72555320b,syscc=false,proposal=0xc4215583c0,canname=mycc:0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 450[0m chaincode is running(no need to launch) : mycc:0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 451[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 452[0m chaincode canonical name: mycc:0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 453[0m [23f51cb0]Inside sendExecuteMessage. Message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 454[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 455[0m Proposal different from nil. Creating chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 456[0m [23f51cb0]sendExecuteMsg trigger event INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 457[0m [23f51cb0]Move state message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 458[0m [23f51cb0]Fabric side Handling ChaincodeMessage of type: INIT in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 459[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 45a[0m [23f51cb0]sending state message INIT
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 45b[0m [23f51cb0]Received message PUT_STATE from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 45c[0m [23f51cb0]Fabric side Handling ChaincodeMessage of type: PUT_STATE in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 45d[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] func1 -> DEBU 45e[0m [23f51cb0]state is ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] func1 -> DEBU 45f[0m [23f51cb0]Completed PUT_STATE. Sending RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] 1 -> DEBU 460[0m [23f51cb0]enterBusyState trigger event RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 461[0m [23f51cb0]Move state message RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 462[0m [23f51cb0]Fabric side Handling ChaincodeMessage of type: RESPONSE in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 463[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 464[0m [23f51cb0]sending state message RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 465[0m [23f51cb0]Received message PUT_STATE from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 466[0m [23f51cb0]Fabric side Handling ChaincodeMessage of type: PUT_STATE in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 467[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] func1 -> DEBU 468[0m [23f51cb0]state is ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] func1 -> DEBU 469[0m [23f51cb0]Completed PUT_STATE. Sending RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] 1 -> DEBU 46a[0m [23f51cb0]enterBusyState trigger event RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 46b[0m [23f51cb0]Move state message RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 46c[0m [23f51cb0]Fabric side Handling ChaincodeMessage of type: RESPONSE in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 46d[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 46e[0m [23f51cb0]sending state message RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 46f[0m [23f51cb0]Received message COMPLETED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 470[0m [23f51cb0]Fabric side Handling ChaincodeMessage of type: COMPLETED in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 471[0m [23f51cb067b64bd62d493e50aaae37cd4211db1796e11e4669404ad72555320b]HandleMessage- COMPLETED. Notify
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 472[0m notifying Txid:23f51cb067b64bd62d493e50aaae37cd4211db1796e11e4669404ad72555320b
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 473[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] callChaincode -> DEBU 474[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] GetTxSimulationResults -> DEBU 475[0m Simulation completed, getting simulation results
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] Done -> DEBU 476[0m Done with transaction simulation / query execution [d00a9e39-8c3b-47ad-91d4-d190b9990f96]
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] simulateProposal -> DEBU 477[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] endorseProposal -> DEBU 478[0m Entry - txid: 23f51cb067b64bd62d493e50aaae37cd4211db1796e11e4669404ad72555320b channel id: myc chaincode id: name:"lscc" 
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] endorseProposal -> DEBU 479[0m info: escc for chaincode id name:"lscc"  is escc
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] callChaincode -> DEBU 47a[0m Entry - txid: 23f51cb067b64bd62d493e50aaae37cd4211db1796e11e4669404ad72555320b channel id: myc version: 1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] NewCCContext -> DEBU 47b[0m NewCCCC (chain=myc,chaincode=escc,version=1.0.0,txid=23f51cb067b64bd62d493e50aaae37cd4211db1796e11e4669404ad72555320b,syscc=true,proposal=0xc4215583c0,canname=escc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 47c[0m chaincode is running(no need to launch) : escc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 47d[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 47e[0m chaincode canonical name: escc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 47f[0m [23f51cb0]Inside sendExecuteMessage. Message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 480[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 481[0m Proposal different from nil. Creating chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 482[0m [23f51cb0]sendExecuteMsg trigger event TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 483[0m [23f51cb0]Move state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 484[0m [23f51cb0]Fabric side Handling ChaincodeMessage of type: TRANSACTION in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 485[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 486[0m [23f51cb0]sending state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 487[0m [23f51cb0]Received message TRANSACTION from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 488[0m [23f51cb0]Handling ChaincodeMessage of type: TRANSACTION(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeTransaction -> DEBU 489[0m [23f51cb0]Received TRANSACTION, invoking transaction on chaincode(Src:ready, Dst:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [escc] Invoke -> DEBU 48a[0m ESCC starts: 8 args
[36mpeer         |[0m {now} [36m{date} {time} UTC [escc] Invoke -> DEBU 48b[0m ESCC exits successfully
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 48c[0m [23f51cb0]Transaction completed. Sending COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 48d[0m [23f51cb0]Move state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 48e[0m [23f51cb0]Handling ChaincodeMessage of type: COMPLETED(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 48f[0m [23f51cb0]send state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 490[0m [23f51cb0]Received message COMPLETED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 491[0m [23f51cb0]Fabric side Handling ChaincodeMessage of type: COMPLETED in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 492[0m [23f51cb067b64bd62d493e50aaae37cd4211db1796e11e4669404ad72555320b]HandleMessage- COMPLETED. Notify
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 493[0m notifying Txid:23f51cb067b64bd62d493e50aaae37cd4211db1796e11e4669404ad72555320b
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 494[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] callChaincode -> DEBU 495[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] endorseProposal -> DEBU 496[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] Done -> DEBU 497[0m Done with transaction simulation / query execution [d00a9e39-8c3b-47ad-91d4-d190b9990f96]
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 498[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [blocksProvider] DeliverBlocks -> DEBU 499[0m [myc] Adding payload locally, buffer seqNum = [1], peers number [0]
[36mpeer         |[0m {now} [36m{date} {time} UTC [blocksProvider] DeliverBlocks -> DEBU 49a[0m [myc] Gossiping block [1], peers number [0]
[36mpeer         |[0m {now} [36m{date} {time} UTC [committer] Commit -> DEBU 49b[0m Validating block
[36mpeer         |[0m {now} [36m{date} {time} UTC [txvalidator] Validate -> DEBU 49c[0m START Block Validation
[36mpeer         |[0m {now} [36m{date} {time} UTC [txvalidator] Validate -> DEBU 49d[0m Validating transaction peer.ValidateTransaction()
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] ValidateTransaction -> DEBU 49e[0m ValidateTransactionEnvelope starts for envelope 0xc421bcced0
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] ValidateTransaction -> DEBU 49f[0m Header is channel_header:"\010\003\032\014\010\367\222\313\323\005\020\356\266\347\251\002\"\003myc*@23f51cb067b64bd62d493e50aaae37cd4211db1796e11e4669404ad72555320b:\010\022\006\022\004lscc" signature_header:"\n\246\007\n\007DEFAULT\022\232\007-----BEGIN -----\nMIICizCCAjKgAwIBAgIUBEVwsSx0TmqdbzNwleNBBzoIT0wwCgYIKoZIzj0EAwIw\nfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNh\nbiBGcmFuY2lzY28xHzAdBgNVBAoTFkludGVybmV0IFdpZGdldHMsIEluYy4xDDAK\nBgNVBAsTA1dXVzEUMBIGA1UEAxMLZXhhbXBsZS5jb20wHhcNMTYxMTExMTcwNzAw\nWhcNMTcxMTExMTcwNzAwWjBjMQswCQYDVQQGEwJVUzEXMBUGA1UECBMOTm9ydGgg\nQ2Fyb2xpbmExEDAOBgNVBAcTB1JhbGVpZ2gxGzAZBgNVBAoTEkh5cGVybGVkZ2Vy\nIEZhYnJpYzEMMAoGA1UECxMDQ09QMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE\nHBuKsAO43hs4JGpFfiGMkB/xsILTsOvmN2WmwpsPHZNL6w8HWe3xCPQtdG/XJJvZ\n+C756KEsUBM3yw5PTfku8qOBpzCBpDAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYw\nFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFOFC\ndcUZ4es3ltiCgAVDoyLfVpPIMB8GA1UdIwQYMBaAFBdnQj2qnoI/xMUdn1vDmdG1\nnEgQMCUGA1UdEQQeMByCCm15aG9zdC5jb22CDnd3dy5teWhvc3QuY29tMAoGCCqG\nSM49BAMCA0cAMEQCIDf9Hbl4xn3z4EwNKmilM9lX2Fq4jWpAaRVB97OmVEeyAiAk\naXzB/jnlU39B7Wws9BIr9c8mSOEPF6VY1uGP+dKV0g==\n-----END -----\n\022\0303tT\253\225U\177%\207\206\21357'v\376\023\335H\220\355\365x\261" 
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChannelHeader -> DEBU 4a0[0m validateChannelHeader info: header type 3
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 4a1[0m checkSignatureFromCreator starts
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 4a2[0m checkSignatureFromCreator info: creator is &{{DEFAULT 08d3cb7b7e7aa9b1e001378aa0ce558053e7785c68402348fc7c72b290ac10c4}}
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 4a3[0m checkSignatureFromCreator info: creator is valid
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 4a4[0m checkSignatureFromCreator exists successfully
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateEndorserTransaction -> DEBU 4a5[0m validateEndorserTransaction starts for data 0xc421c20000, header channel_header:"\010\003\032\014\010\367\222\313\323\005\020\356\266\347\251\002\"\003myc*@23f51cb067b64bd62d493e50aaae37cd4211db1796e11e4669404ad72555320b:\010\022\006\022\004lscc" signature_header:"\n\246\007\n\007DEFAULT\022\232\007-----BEGIN -----\nMIICizCCAjKgAwIBAgIUBEVwsSx0TmqdbzNwleNBBzoIT0wwCgYIKoZIzj0EAwIw\nfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNh\nbiBGcmFuY2lzY28xHzAdBgNVBAoTFkludGVybmV0IFdpZGdldHMsIEluYy4xDDAK\nBgNVBAsTA1dXVzEUMBIGA1UEAxMLZXhhbXBsZS5jb20wHhcNMTYxMTExMTcwNzAw\nWhcNMTcxMTExMTcwNzAwWjBjMQswCQYDVQQGEwJVUzEXMBUGA1UECBMOTm9ydGgg\nQ2Fyb2xpbmExEDAOBgNVBAcTB1JhbGVpZ2gxGzAZBgNVBAoTEkh5cGVybGVkZ2Vy\nIEZhYnJpYzEMMAoGA1UECxMDQ09QMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE\nHBuKsAO43hs4JGpFfiGMkB/xsILTsOvmN2WmwpsPHZNL6w8HWe3xCPQtdG/XJJvZ\n+C756KEsUBM3yw5PTfku8qOBpzCBpDAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYw\nFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFOFC\ndcUZ4es3ltiCgAVDoyLfVpPIMB8GA1UdIwQYMBaAFBdnQj2qnoI/xMUdn1vDmdG1\nnEgQMCUGA1UdEQQeMByCCm15aG9zdC5jb22CDnd3dy5teWhvc3QuY29tMAoGCCqG\nSM49BAMCA0cAMEQCIDf9Hbl4xn3z4EwNKmilM9lX2Fq4jWpAaRVB97OmVEeyAiAk\naXzB/jnlU39B7Wws9BIr9c8mSOEPF6VY1uGP+dKV0g==\n-----END -----\n\022\0303tT\253\225U\177%\207\206\21357'v\376\023\335H\220\355\365x\261" 
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateEndorserTransaction -> DEBU 4a6[0m validateEndorserTransaction info: there are 1 actions
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateEndorserTransaction -> DEBU 4a7[0m validateEndorserTransaction info: signature header is valid
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] ValidateTransaction -> DEBU 4a8[0m ValidateTransactionEnvelope returns err %!s(<nil>)
[36mpeer         |[0m {now} [36m{date} {time} UTC [txvalidator] Validate -> DEBU 4a9[0m Transaction is for chain myc
[36mpeer         |[0m {now} [36m{date} {time} UTC [fsblkstorage] retrieveTransactionByID -> DEBU 4aa[0m retrieveTransactionByID() - txId = [23f51cb067b64bd62d493e50aaae37cd4211db1796e11e4669404ad72555320b]
[36mpeer         |[0m {now} [36m{date} {time} UTC [txvalidator] Validate -> DEBU 4ab[0m Validating transaction vscc tx validate
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] NewTxSimulator -> DEBU 4ac[0m constructing new tx simulator
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] newLockBasedTxSimulator -> DEBU 4ad[0m constructing new tx simulator [ce598105-000d-4ad3-bf08-f2548c6f205c]
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] NewCCContext -> DEBU 4ae[0m NewCCCC (chain=myc,chaincode=vscc,version=1.0.0,txid=60f03d6e-e7ba-49a9-9570-fb201b0ac051,syscc=true,proposal=0x0,canname=vscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [txvalidator] VSCCValidateTxForCC -> DEBU 4af[0m Invoking VSCC txid 23f51cb067b64bd62d493e50aaae37cd4211db1796e11e4669404ad72555320b chaindID myc
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 4b0[0m chaincode is running(no need to launch) : vscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 4b1[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 4b2[0m chaincode canonical name: vscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 4b3[0m [60f03d6e]Inside sendExecuteMessage. Message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 4b4[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 4b5[0m [60f03d6e]sendExecuteMsg trigger event TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 4b6[0m [60f03d6e]Move state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 4b7[0m [60f03d6e]Fabric side Handling ChaincodeMessage of type: TRANSACTION in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 4b8[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 4b9[0m [60f03d6e]sending state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 4ba[0m [60f03d6e]Received message TRANSACTION from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 4bb[0m [60f03d6e]Handling ChaincodeMessage of type: TRANSACTION(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeTransaction -> DEBU 4bc[0m [60f03d6e]Received TRANSACTION, invoking transaction on chaincode(Src:ready, Dst:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [vscc] Invoke -> DEBU 4bd[0m VSCC invoked
[36mpeer         |[0m {now} [36m{date} {time} UTC [vscc] deduplicateIdentity -> DEBU 4be[0m Signature set is of size 1 out of 1 endorsement(s)
[36mpeer         |[0m {now} [36m{date} {time} UTC [vscc] Invoke -> DEBU 4bf[0m VSCC info: doing special validation for LSCC
[36mpeer         |[0m {now} [36m{date} {time} UTC [vscc] ValidateLSCCInvocation -> DEBU 4c0[0m VSCC info: ValidateLSCCInvocation acting on deploy [][]uint8{{[]uint8{{0x6d, 0x79, 0x63}}, []uint8{{0xa, 0x24, 0x8, 0x1, 0x12, 0x9, 0x12, 0x4, 0x6d, 0x79, 0x63, 0x63, 0x1a, 0x1, 0x30, 0x1a, 0x15, 0xa, 0x3, 0x66, 0x6f, 0x6f, 0xa, 0x1, 0x61, 0xa, 0x3, 0x31, 0x30, 0x30, 0xa, 0x1, 0x62, 0xa, 0x3, 0x32, 0x30, 0x30}}, []uint8{{}}, []uint8{{0x65, 0x73, 0x63, 0x63}}, []uint8{{0x76, 0x73, 0x63, 0x63}}}}
[36mpeer         |[0m {now} [36m{date} {time} UTC [vscc] ValidateLSCCInvocation -> DEBU 4c1[0m VSCC info: validating invocation of lscc function deploy on arguments [][]uint8{{[]uint8{{0x6d, 0x79, 0x63}}, []uint8{{0xa, 0x24, 0x8, 0x1, 0x12, 0x9, 0x12, 0x4, 0x6d, 0x79, 0x63, 0x63, 0x1a, 0x1, 0x30, 0x1a, 0x15, 0xa, 0x3, 0x66, 0x6f, 0x6f, 0xa, 0x1, 0x61, 0xa, 0x3, 0x31, 0x30, 0x30, 0xa, 0x1, 0x62, 0xa, 0x3, 0x32, 0x30, 0x30}}, []uint8{{}}, []uint8{{0x65, 0x73, 0x63, 0x63}}, []uint8{{0x76, 0x73, 0x63, 0x63}}}}
[36mpeer         |[0m {now} [36m{date} {time} UTC [vscc] ValidateLSCCInvocation -> DEBU 4c2[0m Namespace lscc
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] newQueryExecutor -> DEBU 4c3[0m constructing new query executor [691e0ff8-c155-4b97-bdd2-f969a03b2942]
[36mpeer         |[0m {now} [36m{date} {time} UTC [stateleveldb] GetState -> DEBU 4c4[0m GetState(). ns=lscc, key=mycc
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] Done -> DEBU 4c5[0m Done with transaction simulation / query execution [691e0ff8-c155-4b97-bdd2-f969a03b2942]
[36mpeer         |[0m {now} [36m{date} {time} UTC [vscc] ValidateLSCCInvocation -> DEBU 4c6[0m Validating deploy for cc mycc version 0
[36mpeer         |[0m {now} [36m{date} {time} UTC [vscc] checkInstantiationPolicy -> DEBU 4c7[0m VSCC info: checkInstantiationPolicy starts, policy is &cauthdsl.policy{{evaluator:(func([]*common.SignedData, []bool) bool)(0x659630)}}
[36mpeer         |[0m {now} [36m{date} {time} UTC [vscc] Invoke -> DEBU 4c8[0m VSCC exists successfully
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 4c9[0m [60f03d6e]Transaction completed. Sending COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 4ca[0m [60f03d6e]Move state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 4cb[0m [60f03d6e]Handling ChaincodeMessage of type: COMPLETED(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 4cc[0m [60f03d6e]send state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 4cd[0m [60f03d6e]Received message COMPLETED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 4ce[0m [60f03d6e]Fabric side Handling ChaincodeMessage of type: COMPLETED in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 4cf[0m [60f03d6e-e7ba-49a9-9570-fb201b0ac051]HandleMessage- COMPLETED. Notify
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 4d0[0m notifying Txid:60f03d6e-e7ba-49a9-9570-fb201b0ac051
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 4d1[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] Done -> DEBU 4d2[0m Done with transaction simulation / query execution [ce598105-000d-4ad3-bf08-f2548c6f205c]
[36mpeer         |[0m {now} [36m{date} {time} UTC [txvalidator] Validate -> DEBU 4d3[0m END Block Validation
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] ValidateAndPrepare -> DEBU 4d4[0m Validating new block with num trans = [1]
[36mpeer         |[0m {now} [36m{date} {time} UTC [statevalidator] ValidateAndPrepareBatch -> DEBU 4d5[0m New block arrived for validation:&common.Block{{Header:(*common.BlockHeader)(0xc421bcef80), Data:(*common.BlockData)(0xc421be3240), Metadata:(*common.BlockMetadata)(0xc421be3280)}}, doMVCCValidation=true
[36mpeer         |[0m {now} [36m{date} {time} UTC [statevalidator] ValidateAndPrepareBatch -> DEBU 4d6[0m Validating a block with [1] transactions
[36mpeer         |[0m {now} [36m{date} {time} UTC [stateleveldb] GetState -> DEBU 4d7[0m GetState(). ns=lscc, key=mycc
[36mpeer         |[0m {now} [36m{date} {time} UTC [statevalidator] ValidateAndPrepareBatch -> DEBU 4d8[0m Block [1] Transaction index [0] TxId [23f51cb067b64bd62d493e50aaae37cd4211db1796e11e4669404ad72555320b] marked as valid by state validator
[36mpeer         |[0m {now} [36m{date} {time} UTC [fsblkstorage] indexBlock -> DEBU 4d9[0m Indexing block [blockNum=1, blockHash=[]byte{{0xfa, 0xbb, 0x4d, 0x3, 0xc6, 0xb1, 0x5b, 0x5a, 0xb7, 0x8d, 0x3c, 0xd7, 0x2d, 0xe3, 0x8b, 0x76, 0xa3, 0x90, 0xb7, 0x65, 0xc3, 0xec, 0x5d, 0x33, 0xbd, 0x42, 0x85, 0x59, 0x8a, 0xc9, 0x3f, 0xbd}} txOffsets=
[36mpeer         |[0m {now} txId=23f51cb067b64bd62d493e50aaae37cd4211db1796e11e4669404ad72555320b locPointer=offset=70, bytesLength=3705
[36mpeer         |[0m {now} ]
[36mpeer         |[0m {now} [36m{date} {time} UTC [fsblkstorage] indexBlock -> DEBU 4da[0m Adding txLoc [fileSuffixNum=0, offset=12007, bytesLength=3705] for tx ID: [23f51cb067b64bd62d493e50aaae37cd4211db1796e11e4669404ad72555320b] to index
[36mpeer         |[0m {now} [36m{date} {time} UTC [fsblkstorage] indexBlock -> DEBU 4db[0m Adding txLoc [fileSuffixNum=0, offset=12007, bytesLength=3705] for tx number:[0] ID: [23f51cb067b64bd62d493e50aaae37cd4211db1796e11e4669404ad72555320b] to blockNumTranNum index
[36mpeer         |[0m {now} [36m{date} {time} UTC [fsblkstorage] updateCheckpoint -> DEBU 4dc[0m Broadcasting about update checkpointInfo: latestFileChunkSuffixNum=[0], latestFileChunksize=[17803], isChainEmpty=[false], lastBlockNumber=[1]
[36mpeer         |[0m {now} {date} {time} UTC [kvledger] Commit -> INFO 4dd[0m Channel [myc]: Created block [1] with 1 transaction(s)
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] Commit -> DEBU 4de[0m Committing updates to state database
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] Commit -> DEBU 4df[0m Write lock acquired for committing updates to state database
[36mpeer         |[0m {now} [36m{date} {time} UTC [stateleveldb] ApplyUpdates -> DEBU 4e0[0m Channel [myc]: Applying key=[[]byte{{0x6c, 0x73, 0x63, 0x63, 0x0, 0x6d, 0x79, 0x63, 0x63}}]
[36mpeer         |[0m {now} [36m{date} {time} UTC [stateleveldb] ApplyUpdates -> DEBU 4e1[0m Channel [myc]: Applying key=[[]byte{{0x6d, 0x79, 0x63, 0x63, 0x0, 0x61}}]
[36mpeer         |[0m {now} [36m{date} {time} UTC [stateleveldb] ApplyUpdates -> DEBU 4e2[0m Channel [myc]: Applying key=[[]byte{{0x6d, 0x79, 0x63, 0x63, 0x0, 0x62}}]
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] Commit -> DEBU 4e3[0m Updates committed to state database
[36mpeer         |[0m {now} [36m{date} {time} UTC [historyleveldb] Commit -> DEBU 4e4[0m Channel [myc]: Updating history database for blockNo [1] with [1] transactions
[36mpeer         |[0m {now} [36m{date} {time} UTC [historyleveldb] Commit -> DEBU 4e5[0m Channel [myc]: Updates committed to history database for blockNo [1]
[36mpeer         |[0m {now} [36m{date} {time} UTC [eventhub_producer] SendProducerBlockEvent -> DEBU 4e6[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [eventhub_producer] SendProducerBlockEvent -> DEBU 4e7[0m Channel [myc]: Block event for block number [1] contains transaction id: 23f51cb067b64bd62d493e50aaae37cd4211db1796e11e4669404ad72555320b
[36mpeer         |[0m {now} {date} {time} UTC [eventhub_producer] SendProducerBlockEvent -> INFO 4e8[0m Channel [myc]: Sending event for block number [1]
[36mpeer         |[0m {now} [36m{date} {time} UTC [eventhub_producer] Send -> DEBU 4e9[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [eventhub_producer] Send -> DEBU 4ea[0m Event processor timeout > 0
[36mpeer         |[0m {now} [36m{date} {time} UTC [eventhub_producer] Send -> DEBU 4eb[0m Event sent successfully
[36mpeer         |[0m {now} [36m{date} {time} UTC [eventhub_producer] Send -> DEBU 4ec[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [eventhub_producer] SendProducerBlockEvent -> DEBU 4ed[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 4ee[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] ValidateProposalMessage -> DEBU 4ef[0m ValidateProposalMessage starts for signed proposal 0xc4216a2600
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChannelHeader -> DEBU 4f0[0m validateChannelHeader info: header type 3
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 4f1[0m checkSignatureFromCreator starts
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 4f2[0m checkSignatureFromCreator info: creator is &{{DEFAULT 08d3cb7b7e7aa9b1e001378aa0ce558053e7785c68402348fc7c72b290ac10c4}}
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 4f3[0m checkSignatureFromCreator info: creator is valid
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 4f4[0m checkSignatureFromCreator exists successfully
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChaincodeProposalMessage -> DEBU 4f5[0m validateChaincodeProposalMessage starts for proposal 0xc42168e410, header 0xc4216a2630
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChaincodeProposalMessage -> DEBU 4f6[0m validateChaincodeProposalMessage info: header extension references chaincode name:"mycc" 
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 4f7[0m processing txid: 5bc1c2ee00dd55435d7d9f868997f5a53ed2ca7e449cbde9d5e71c1296ebc8fd
[36mpeer         |[0m {now} [36m{date} {time} UTC [fsblkstorage] retrieveTransactionByID -> DEBU 4f8[0m retrieveTransactionByID() - txId = [5bc1c2ee00dd55435d7d9f868997f5a53ed2ca7e449cbde9d5e71c1296ebc8fd]
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] NewTxSimulator -> DEBU 4f9[0m constructing new tx simulator
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] newLockBasedTxSimulator -> DEBU 4fa[0m constructing new tx simulator [bab5fa94-ac0b-422a-a2ce-f81903b37536]
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] simulateProposal -> DEBU 4fb[0m Entry - txid: 5bc1c2ee00dd55435d7d9f868997f5a53ed2ca7e449cbde9d5e71c1296ebc8fd channel id: myc
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] NewCCContext -> DEBU 4fc[0m NewCCCC (chain=myc,chaincode=lscc,version=1.0.0,txid=5bc1c2ee00dd55435d7d9f868997f5a53ed2ca7e449cbde9d5e71c1296ebc8fd,syscc=true,proposal=0xc42168e410,canname=lscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 4fd[0m chaincode is running(no need to launch) : lscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 4fe[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 4ff[0m chaincode canonical name: lscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 500[0m [5bc1c2ee]Inside sendExecuteMessage. Message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 501[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 502[0m Proposal different from nil. Creating chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 503[0m [5bc1c2ee]sendExecuteMsg trigger event TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 504[0m [5bc1c2ee]Move state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 505[0m [5bc1c2ee]Fabric side Handling ChaincodeMessage of type: TRANSACTION in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 506[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 507[0m [5bc1c2ee]sending state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 508[0m [5bc1c2ee]Received message TRANSACTION from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 509[0m [5bc1c2ee]Handling ChaincodeMessage of type: TRANSACTION(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeTransaction -> DEBU 50a[0m [5bc1c2ee]Received TRANSACTION, invoking transaction on chaincode(Src:ready, Dst:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleGetState -> DEBU 50b[0m [5bc1c2ee]Sending GET_STATE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 50c[0m [5bc1c2ee]Received message GET_STATE from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 50d[0m [5bc1c2ee]Fabric side Handling ChaincodeMessage of type: GET_STATE in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] afterGetState -> DEBU 50e[0m [5bc1c2ee]Received GET_STATE, invoking get state from ledger
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 50f[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] func1 -> DEBU 510[0m [5bc1c2ee] getting state for chaincode lscc, key mycc, channel myc
[36mpeer         |[0m {now} [36m{date} {time} UTC [stateleveldb] GetState -> DEBU 511[0m GetState(). ns=lscc, key=mycc
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] func1 -> DEBU 512[0m [5bc1c2ee]Got state. Sending RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] 1 -> DEBU 513[0m [5bc1c2ee]handleGetState serial send RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 514[0m [5bc1c2ee]Received message RESPONSE from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 515[0m [5bc1c2ee]Handling ChaincodeMessage of type: RESPONSE(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] sendChannel -> DEBU 516[0m [5bc1c2ee]before send
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] sendChannel -> DEBU 517[0m [5bc1c2ee]after send
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] afterResponse -> DEBU 518[0m [5bc1c2ee]Received RESPONSE, communicated (state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleGetState -> DEBU 519[0m [5bc1c2ee]GetState received payload RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 51a[0m [5bc1c2ee]Transaction completed. Sending COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 51b[0m [5bc1c2ee]Move state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 51c[0m [5bc1c2ee]Handling ChaincodeMessage of type: COMPLETED(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 51d[0m [5bc1c2ee]send state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 51e[0m [5bc1c2ee]Received message COMPLETED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 51f[0m [5bc1c2ee]Fabric side Handling ChaincodeMessage of type: COMPLETED in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 520[0m [5bc1c2ee00dd55435d7d9f868997f5a53ed2ca7e449cbde9d5e71c1296ebc8fd]HandleMessage- COMPLETED. Notify
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 521[0m notifying Txid:5bc1c2ee00dd55435d7d9f868997f5a53ed2ca7e449cbde9d5e71c1296ebc8fd
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 522[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] GetChaincodeData -> DEBU 523[0m Getting chaincode data for <mycc, 0> from cache
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] callChaincode -> DEBU 524[0m Entry - txid: 5bc1c2ee00dd55435d7d9f868997f5a53ed2ca7e449cbde9d5e71c1296ebc8fd channel id: myc version: 0
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] NewCCContext -> DEBU 525[0m NewCCCC (chain=myc,chaincode=mycc,version=0,txid=5bc1c2ee00dd55435d7d9f868997f5a53ed2ca7e449cbde9d5e71c1296ebc8fd,syscc=false,proposal=0xc42168e410,canname=mycc:0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 526[0m chaincode is running(no need to launch) : mycc:0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 527[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 528[0m chaincode canonical name: mycc:0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 529[0m [5bc1c2ee]Inside sendExecuteMessage. Message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 52a[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 52b[0m Proposal different from nil. Creating chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 52c[0m [5bc1c2ee]sendExecuteMsg trigger event TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 52d[0m [5bc1c2ee]Move state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 52e[0m [5bc1c2ee]Fabric side Handling ChaincodeMessage of type: TRANSACTION in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 52f[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 530[0m [5bc1c2ee]sending state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 531[0m [5bc1c2ee]Received message GET_STATE from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 532[0m [5bc1c2ee]Fabric side Handling ChaincodeMessage of type: GET_STATE in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] afterGetState -> DEBU 533[0m [5bc1c2ee]Received GET_STATE, invoking get state from ledger
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 534[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] func1 -> DEBU 535[0m [5bc1c2ee] getting state for chaincode mycc, key a, channel myc
[36mpeer         |[0m {now} [36m{date} {time} UTC [stateleveldb] GetState -> DEBU 536[0m GetState(). ns=mycc, key=a
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] func1 -> DEBU 537[0m [5bc1c2ee]Got state. Sending RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] 1 -> DEBU 538[0m [5bc1c2ee]handleGetState serial send RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 539[0m [5bc1c2ee]Received message COMPLETED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 53a[0m [5bc1c2ee]Fabric side Handling ChaincodeMessage of type: COMPLETED in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 53b[0m [5bc1c2ee00dd55435d7d9f868997f5a53ed2ca7e449cbde9d5e71c1296ebc8fd]HandleMessage- COMPLETED. Notify
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 53c[0m notifying Txid:5bc1c2ee00dd55435d7d9f868997f5a53ed2ca7e449cbde9d5e71c1296ebc8fd
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 53d[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] callChaincode -> DEBU 53e[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] GetTxSimulationResults -> DEBU 53f[0m Simulation completed, getting simulation results
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] Done -> DEBU 540[0m Done with transaction simulation / query execution [bab5fa94-ac0b-422a-a2ce-f81903b37536]
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] simulateProposal -> DEBU 541[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] endorseProposal -> DEBU 542[0m Entry - txid: 5bc1c2ee00dd55435d7d9f868997f5a53ed2ca7e449cbde9d5e71c1296ebc8fd channel id: myc chaincode id: name:"mycc" 
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] endorseProposal -> DEBU 543[0m info: escc for chaincode id name:"mycc"  is escc
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] callChaincode -> DEBU 544[0m Entry - txid: 5bc1c2ee00dd55435d7d9f868997f5a53ed2ca7e449cbde9d5e71c1296ebc8fd channel id: myc version: 1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] NewCCContext -> DEBU 545[0m NewCCCC (chain=myc,chaincode=escc,version=1.0.0,txid=5bc1c2ee00dd55435d7d9f868997f5a53ed2ca7e449cbde9d5e71c1296ebc8fd,syscc=true,proposal=0xc42168e410,canname=escc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 546[0m chaincode is running(no need to launch) : escc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 547[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 548[0m chaincode canonical name: escc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 549[0m [5bc1c2ee]Inside sendExecuteMessage. Message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 54a[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 54b[0m Proposal different from nil. Creating chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 54c[0m [5bc1c2ee]sendExecuteMsg trigger event TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 54d[0m [5bc1c2ee]Move state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 54e[0m [5bc1c2ee]Fabric side Handling ChaincodeMessage of type: TRANSACTION in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 54f[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 550[0m [5bc1c2ee]sending state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 551[0m [5bc1c2ee]Received message TRANSACTION from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 552[0m [5bc1c2ee]Handling ChaincodeMessage of type: TRANSACTION(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeTransaction -> DEBU 553[0m [5bc1c2ee]Received TRANSACTION, invoking transaction on chaincode(Src:ready, Dst:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [escc] Invoke -> DEBU 554[0m ESCC starts: 8 args
[36mpeer         |[0m {now} [36m{date} {time} UTC [escc] Invoke -> DEBU 555[0m ESCC exits successfully
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 556[0m [5bc1c2ee]Transaction completed. Sending COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 557[0m [5bc1c2ee]Move state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 558[0m [5bc1c2ee]Handling ChaincodeMessage of type: COMPLETED(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 559[0m [5bc1c2ee]send state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 55a[0m [5bc1c2ee]Received message COMPLETED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 55b[0m [5bc1c2ee]Fabric side Handling ChaincodeMessage of type: COMPLETED in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 55c[0m [5bc1c2ee00dd55435d7d9f868997f5a53ed2ca7e449cbde9d5e71c1296ebc8fd]HandleMessage- COMPLETED. Notify
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 55d[0m notifying Txid:5bc1c2ee00dd55435d7d9f868997f5a53ed2ca7e449cbde9d5e71c1296ebc8fd
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 55e[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] callChaincode -> DEBU 55f[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] endorseProposal -> DEBU 560[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] Done -> DEBU 561[0m Done with transaction simulation / query execution [bab5fa94-ac0b-422a-a2ce-f81903b37536]
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 562[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 563[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] ValidateProposalMessage -> DEBU 564[0m ValidateProposalMessage starts for signed proposal 0xc4217f5080
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChannelHeader -> DEBU 565[0m validateChannelHeader info: header type 1
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 566[0m checkSignatureFromCreator starts
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 567[0m checkSignatureFromCreator info: creator is &{{DEFAULT 08d3cb7b7e7aa9b1e001378aa0ce558053e7785c68402348fc7c72b290ac10c4}}
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 568[0m checkSignatureFromCreator info: creator is valid
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 569[0m checkSignatureFromCreator exists successfully
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChaincodeProposalMessage -> DEBU 56a[0m validateChaincodeProposalMessage starts for proposal 0xc4217ee320, header 0xc4217f50e0
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChaincodeProposalMessage -> DEBU 56b[0m validateChaincodeProposalMessage info: header extension references chaincode name:"cscc" 
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 56c[0m processing txid: fda5671d286bf3b32469ff74843d9ee575490aab888589899ed57279cc49826d
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] simulateProposal -> DEBU 56d[0m Entry - txid: fda5671d286bf3b32469ff74843d9ee575490aab888589899ed57279cc49826d channel id: 
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] callChaincode -> DEBU 56e[0m Entry - txid: fda5671d286bf3b32469ff74843d9ee575490aab888589899ed57279cc49826d channel id:  version: 1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] NewCCContext -> DEBU 56f[0m NewCCCC (chain=,chaincode=cscc,version=1.0.0,txid=fda5671d286bf3b32469ff74843d9ee575490aab888589899ed57279cc49826d,syscc=true,proposal=0xc4217ee320,canname=cscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 570[0m chaincode is running(no need to launch) : cscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 571[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 572[0m chaincode canonical name: cscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 573[0m [fda5671d]Inside sendExecuteMessage. Message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 574[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 575[0m Proposal different from nil. Creating chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 576[0m [fda5671d]sendExecuteMsg trigger event TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 577[0m [fda5671d]Move state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 578[0m [fda5671d]Fabric side Handling ChaincodeMessage of type: TRANSACTION in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 579[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 57a[0m [fda5671d]sending state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 57b[0m [fda5671d]Received message TRANSACTION from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 57c[0m [fda5671d]Handling ChaincodeMessage of type: TRANSACTION(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeTransaction -> DEBU 57d[0m [fda5671d]Received TRANSACTION, invoking transaction on chaincode(Src:ready, Dst:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [cscc] Invoke -> DEBU 57e[0m Invoke function: GetConfigBlock
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 57f[0m [fda5671d]Transaction completed. Sending COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 580[0m [fda5671d]Move state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 581[0m [fda5671d]Handling ChaincodeMessage of type: COMPLETED(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 582[0m [fda5671d]send state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 583[0m [fda5671d]Received message COMPLETED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 584[0m [fda5671d]Fabric side Handling ChaincodeMessage of type: COMPLETED in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 585[0m [fda5671d286bf3b32469ff74843d9ee575490aab888589899ed57279cc49826d]HandleMessage- COMPLETED. Notify
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 586[0m notifying Txid:fda5671d286bf3b32469ff74843d9ee575490aab888589899ed57279cc49826d
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 587[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] callChaincode -> DEBU 588[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] simulateProposal -> DEBU 589[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 58a[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 58b[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] ValidateProposalMessage -> DEBU 58c[0m ValidateProposalMessage starts for signed proposal 0xc42185c3c0
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChannelHeader -> DEBU 58d[0m validateChannelHeader info: header type 3
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 58e[0m checkSignatureFromCreator starts
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 58f[0m checkSignatureFromCreator info: creator is &{{DEFAULT 08d3cb7b7e7aa9b1e001378aa0ce558053e7785c68402348fc7c72b290ac10c4}}
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 590[0m checkSignatureFromCreator info: creator is valid
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 591[0m checkSignatureFromCreator exists successfully
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChaincodeProposalMessage -> DEBU 592[0m validateChaincodeProposalMessage starts for proposal 0xc4217eff40, header 0xc42185c420
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChaincodeProposalMessage -> DEBU 593[0m validateChaincodeProposalMessage info: header extension references chaincode name:"mycc" 
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 594[0m processing txid: cd49cbf5609bac4b0d6331251d83dd0ed8b2ade1a99ec0e56b7a32223c0ff94b
[36mpeer         |[0m {now} [36m{date} {time} UTC [fsblkstorage] retrieveTransactionByID -> DEBU 595[0m retrieveTransactionByID() - txId = [cd49cbf5609bac4b0d6331251d83dd0ed8b2ade1a99ec0e56b7a32223c0ff94b]
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] NewTxSimulator -> DEBU 596[0m constructing new tx simulator
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] newLockBasedTxSimulator -> DEBU 597[0m constructing new tx simulator [7c5f2ecf-2005-450f-8b1c-f962f5248441]
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] simulateProposal -> DEBU 598[0m Entry - txid: cd49cbf5609bac4b0d6331251d83dd0ed8b2ade1a99ec0e56b7a32223c0ff94b channel id: myc
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] NewCCContext -> DEBU 599[0m NewCCCC (chain=myc,chaincode=lscc,version=1.0.0,txid=cd49cbf5609bac4b0d6331251d83dd0ed8b2ade1a99ec0e56b7a32223c0ff94b,syscc=true,proposal=0xc4217eff40,canname=lscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 59a[0m chaincode is running(no need to launch) : lscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 59b[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 59c[0m chaincode canonical name: lscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 59d[0m [cd49cbf5]Inside sendExecuteMessage. Message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 59e[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 59f[0m Proposal different from nil. Creating chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 5a0[0m [cd49cbf5]sendExecuteMsg trigger event TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 5a1[0m [cd49cbf5]Move state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 5a2[0m [cd49cbf5]Fabric side Handling ChaincodeMessage of type: TRANSACTION in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 5a3[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 5a4[0m [cd49cbf5]sending state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 5a5[0m [cd49cbf5]Received message TRANSACTION from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 5a6[0m [cd49cbf5]Handling ChaincodeMessage of type: TRANSACTION(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeTransaction -> DEBU 5a7[0m [cd49cbf5]Received TRANSACTION, invoking transaction on chaincode(Src:ready, Dst:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleGetState -> DEBU 5a8[0m [cd49cbf5]Sending GET_STATE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 5a9[0m [cd49cbf5]Received message GET_STATE from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 5aa[0m [cd49cbf5]Fabric side Handling ChaincodeMessage of type: GET_STATE in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] afterGetState -> DEBU 5ab[0m [cd49cbf5]Received GET_STATE, invoking get state from ledger
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 5ac[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] func1 -> DEBU 5ad[0m [cd49cbf5] getting state for chaincode lscc, key mycc, channel myc
[36mpeer         |[0m {now} [36m{date} {time} UTC [stateleveldb] GetState -> DEBU 5ae[0m GetState(). ns=lscc, key=mycc
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] func1 -> DEBU 5af[0m [cd49cbf5]Got state. Sending RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] 1 -> DEBU 5b0[0m [cd49cbf5]handleGetState serial send RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 5b1[0m [cd49cbf5]Received message RESPONSE from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 5b2[0m [cd49cbf5]Handling ChaincodeMessage of type: RESPONSE(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] sendChannel -> DEBU 5b3[0m [cd49cbf5]before send
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] sendChannel -> DEBU 5b4[0m [cd49cbf5]after send
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] afterResponse -> DEBU 5b5[0m [cd49cbf5]Received RESPONSE, communicated (state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleGetState -> DEBU 5b6[0m [cd49cbf5]GetState received payload RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 5b7[0m [cd49cbf5]Transaction completed. Sending COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 5b8[0m [cd49cbf5]Move state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 5b9[0m [cd49cbf5]Handling ChaincodeMessage of type: COMPLETED(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 5ba[0m [cd49cbf5]send state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 5bb[0m [cd49cbf5]Received message COMPLETED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 5bc[0m [cd49cbf5]Fabric side Handling ChaincodeMessage of type: COMPLETED in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 5bd[0m [cd49cbf5609bac4b0d6331251d83dd0ed8b2ade1a99ec0e56b7a32223c0ff94b]HandleMessage- COMPLETED. Notify
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 5be[0m notifying Txid:cd49cbf5609bac4b0d6331251d83dd0ed8b2ade1a99ec0e56b7a32223c0ff94b
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 5bf[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] GetChaincodeData -> DEBU 5c0[0m Getting chaincode data for <mycc, 0> from cache
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] callChaincode -> DEBU 5c1[0m Entry - txid: cd49cbf5609bac4b0d6331251d83dd0ed8b2ade1a99ec0e56b7a32223c0ff94b channel id: myc version: 0
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] NewCCContext -> DEBU 5c2[0m NewCCCC (chain=myc,chaincode=mycc,version=0,txid=cd49cbf5609bac4b0d6331251d83dd0ed8b2ade1a99ec0e56b7a32223c0ff94b,syscc=false,proposal=0xc4217eff40,canname=mycc:0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 5c3[0m chaincode is running(no need to launch) : mycc:0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 5c4[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 5c5[0m chaincode canonical name: mycc:0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 5c6[0m [cd49cbf5]Inside sendExecuteMessage. Message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 5c7[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 5c8[0m Proposal different from nil. Creating chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 5c9[0m [cd49cbf5]sendExecuteMsg trigger event TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 5ca[0m [cd49cbf5]Move state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 5cb[0m [cd49cbf5]Fabric side Handling ChaincodeMessage of type: TRANSACTION in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 5cc[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 5cd[0m [cd49cbf5]sending state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 5ce[0m [cd49cbf5]Received message GET_STATE from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 5cf[0m [cd49cbf5]Fabric side Handling ChaincodeMessage of type: GET_STATE in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] afterGetState -> DEBU 5d0[0m [cd49cbf5]Received GET_STATE, invoking get state from ledger
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 5d1[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] func1 -> DEBU 5d2[0m [cd49cbf5] getting state for chaincode mycc, key a, channel myc
[36mpeer         |[0m {now} [36m{date} {time} UTC [stateleveldb] GetState -> DEBU 5d3[0m GetState(). ns=mycc, key=a
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] func1 -> DEBU 5d4[0m [cd49cbf5]Got state. Sending RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] 1 -> DEBU 5d5[0m [cd49cbf5]handleGetState serial send RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 5d6[0m [cd49cbf5]Received message GET_STATE from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 5d7[0m [cd49cbf5]Fabric side Handling ChaincodeMessage of type: GET_STATE in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] afterGetState -> DEBU 5d8[0m [cd49cbf5]Received GET_STATE, invoking get state from ledger
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 5d9[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] func1 -> DEBU 5da[0m [cd49cbf5] getting state for chaincode mycc, key b, channel myc
[36mpeer         |[0m {now} [36m{date} {time} UTC [stateleveldb] GetState -> DEBU 5db[0m GetState(). ns=mycc, key=b
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] func1 -> DEBU 5dc[0m [cd49cbf5]Got state. Sending RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] 1 -> DEBU 5dd[0m [cd49cbf5]handleGetState serial send RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 5de[0m [cd49cbf5]Received message PUT_STATE from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 5df[0m [cd49cbf5]Fabric side Handling ChaincodeMessage of type: PUT_STATE in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 5e0[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] func1 -> DEBU 5e1[0m [cd49cbf5]state is ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] func1 -> DEBU 5e2[0m [cd49cbf5]Completed PUT_STATE. Sending RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] 1 -> DEBU 5e3[0m [cd49cbf5]enterBusyState trigger event RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 5e4[0m [cd49cbf5]Move state message RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 5e5[0m [cd49cbf5]Fabric side Handling ChaincodeMessage of type: RESPONSE in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 5e6[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 5e7[0m [cd49cbf5]sending state message RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 5e8[0m [cd49cbf5]Received message PUT_STATE from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 5e9[0m [cd49cbf5]Fabric side Handling ChaincodeMessage of type: PUT_STATE in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 5ea[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] func1 -> DEBU 5eb[0m [cd49cbf5]state is ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] func1 -> DEBU 5ec[0m [cd49cbf5]Completed PUT_STATE. Sending RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] 1 -> DEBU 5ed[0m [cd49cbf5]enterBusyState trigger event RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 5ee[0m [cd49cbf5]Move state message RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 5ef[0m [cd49cbf5]Fabric side Handling ChaincodeMessage of type: RESPONSE in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 5f0[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 5f1[0m [cd49cbf5]sending state message RESPONSE
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 5f2[0m [cd49cbf5]Received message COMPLETED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 5f3[0m [cd49cbf5]Fabric side Handling ChaincodeMessage of type: COMPLETED in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 5f4[0m [cd49cbf5609bac4b0d6331251d83dd0ed8b2ade1a99ec0e56b7a32223c0ff94b]HandleMessage- COMPLETED. Notify
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 5f5[0m notifying Txid:cd49cbf5609bac4b0d6331251d83dd0ed8b2ade1a99ec0e56b7a32223c0ff94b
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 5f6[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] callChaincode -> DEBU 5f7[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] GetTxSimulationResults -> DEBU 5f8[0m Simulation completed, getting simulation results
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] Done -> DEBU 5f9[0m Done with transaction simulation / query execution [7c5f2ecf-2005-450f-8b1c-f962f5248441]
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] simulateProposal -> DEBU 5fa[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] endorseProposal -> DEBU 5fb[0m Entry - txid: cd49cbf5609bac4b0d6331251d83dd0ed8b2ade1a99ec0e56b7a32223c0ff94b channel id: myc chaincode id: name:"mycc" 
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] endorseProposal -> DEBU 5fc[0m info: escc for chaincode id name:"mycc"  is escc
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] callChaincode -> DEBU 5fd[0m Entry - txid: cd49cbf5609bac4b0d6331251d83dd0ed8b2ade1a99ec0e56b7a32223c0ff94b channel id: myc version: 1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] NewCCContext -> DEBU 5fe[0m NewCCCC (chain=myc,chaincode=escc,version=1.0.0,txid=cd49cbf5609bac4b0d6331251d83dd0ed8b2ade1a99ec0e56b7a32223c0ff94b,syscc=true,proposal=0xc4217eff40,canname=escc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 5ff[0m chaincode is running(no need to launch) : escc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 600[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 601[0m chaincode canonical name: escc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 602[0m [cd49cbf5]Inside sendExecuteMessage. Message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 603[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 604[0m Proposal different from nil. Creating chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 605[0m [cd49cbf5]sendExecuteMsg trigger event TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 606[0m [cd49cbf5]Move state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 607[0m [cd49cbf5]Fabric side Handling ChaincodeMessage of type: TRANSACTION in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 608[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 609[0m [cd49cbf5]sending state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 60a[0m [cd49cbf5]Received message TRANSACTION from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 60b[0m [cd49cbf5]Handling ChaincodeMessage of type: TRANSACTION(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeTransaction -> DEBU 60c[0m [cd49cbf5]Received TRANSACTION, invoking transaction on chaincode(Src:ready, Dst:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [escc] Invoke -> DEBU 60d[0m ESCC starts: 8 args
[36mpeer         |[0m {now} [36m{date} {time} UTC [escc] Invoke -> DEBU 60e[0m ESCC exits successfully
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 60f[0m [cd49cbf5]Transaction completed. Sending COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 610[0m [cd49cbf5]Move state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 611[0m [cd49cbf5]Handling ChaincodeMessage of type: COMPLETED(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 612[0m [cd49cbf5]send state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 613[0m [cd49cbf5]Received message COMPLETED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 614[0m [cd49cbf5]Fabric side Handling ChaincodeMessage of type: COMPLETED in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 615[0m [cd49cbf5609bac4b0d6331251d83dd0ed8b2ade1a99ec0e56b7a32223c0ff94b]HandleMessage- COMPLETED. Notify
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 616[0m notifying Txid:cd49cbf5609bac4b0d6331251d83dd0ed8b2ade1a99ec0e56b7a32223c0ff94b
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 617[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] callChaincode -> DEBU 618[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] endorseProposal -> DEBU 619[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] Done -> DEBU 61a[0m Done with transaction simulation / query execution [7c5f2ecf-2005-450f-8b1c-f962f5248441]
[36mpeer         |[0m {now} [36m{date} {time} UTC [endorser] ProcessProposal -> DEBU 61b[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [blocksProvider] DeliverBlocks -> DEBU 61c[0m [myc] Adding payload locally, buffer seqNum = [2], peers number [0]
[36mpeer         |[0m {now} [36m{date} {time} UTC [blocksProvider] DeliverBlocks -> DEBU 61d[0m [myc] Gossiping block [2], peers number [0]
[36mpeer         |[0m {now} [36m{date} {time} UTC [committer] Commit -> DEBU 61e[0m Validating block
[36mpeer         |[0m {now} [36m{date} {time} UTC [txvalidator] Validate -> DEBU 61f[0m START Block Validation
[36mpeer         |[0m {now} [36m{date} {time} UTC [txvalidator] Validate -> DEBU 620[0m Validating transaction peer.ValidateTransaction()
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] ValidateTransaction -> DEBU 621[0m ValidateTransactionEnvelope starts for envelope 0xc4218d90b0
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] ValidateTransaction -> DEBU 622[0m Header is channel_header:"\010\003\032\014\010\216\223\313\323\005\020\205\323\277\276\002\"\003myc*@cd49cbf5609bac4b0d6331251d83dd0ed8b2ade1a99ec0e56b7a32223c0ff94b:\010\022\006\022\004mycc" signature_header:"\n\246\007\n\007DEFAULT\022\232\007-----BEGIN -----\nMIICizCCAjKgAwIBAgIUBEVwsSx0TmqdbzNwleNBBzoIT0wwCgYIKoZIzj0EAwIw\nfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNh\nbiBGcmFuY2lzY28xHzAdBgNVBAoTFkludGVybmV0IFdpZGdldHMsIEluYy4xDDAK\nBgNVBAsTA1dXVzEUMBIGA1UEAxMLZXhhbXBsZS5jb20wHhcNMTYxMTExMTcwNzAw\nWhcNMTcxMTExMTcwNzAwWjBjMQswCQYDVQQGEwJVUzEXMBUGA1UECBMOTm9ydGgg\nQ2Fyb2xpbmExEDAOBgNVBAcTB1JhbGVpZ2gxGzAZBgNVBAoTEkh5cGVybGVkZ2Vy\nIEZhYnJpYzEMMAoGA1UECxMDQ09QMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE\nHBuKsAO43hs4JGpFfiGMkB/xsILTsOvmN2WmwpsPHZNL6w8HWe3xCPQtdG/XJJvZ\n+C756KEsUBM3yw5PTfku8qOBpzCBpDAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYw\nFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFOFC\ndcUZ4es3ltiCgAVDoyLfVpPIMB8GA1UdIwQYMBaAFBdnQj2qnoI/xMUdn1vDmdG1\nnEgQMCUGA1UdEQQeMByCCm15aG9zdC5jb22CDnd3dy5teWhvc3QuY29tMAoGCCqG\nSM49BAMCA0cAMEQCIDf9Hbl4xn3z4EwNKmilM9lX2Fq4jWpAaRVB97OmVEeyAiAk\naXzB/jnlU39B7Wws9BIr9c8mSOEPF6VY1uGP+dKV0g==\n-----END -----\n\022\030\2641+WG\346\345O\r\360xik\363r*W\000\305\215Q\037\351\266" 
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateChannelHeader -> DEBU 623[0m validateChannelHeader info: header type 3
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 624[0m checkSignatureFromCreator starts
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 625[0m checkSignatureFromCreator info: creator is &{{DEFAULT 08d3cb7b7e7aa9b1e001378aa0ce558053e7785c68402348fc7c72b290ac10c4}}
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 626[0m checkSignatureFromCreator info: creator is valid
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] checkSignatureFromCreator -> DEBU 627[0m checkSignatureFromCreator exists successfully
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateEndorserTransaction -> DEBU 628[0m validateEndorserTransaction starts for data 0xc421906000, header channel_header:"\010\003\032\014\010\216\223\313\323\005\020\205\323\277\276\002\"\003myc*@cd49cbf5609bac4b0d6331251d83dd0ed8b2ade1a99ec0e56b7a32223c0ff94b:\010\022\006\022\004mycc" signature_header:"\n\246\007\n\007DEFAULT\022\232\007-----BEGIN -----\nMIICizCCAjKgAwIBAgIUBEVwsSx0TmqdbzNwleNBBzoIT0wwCgYIKoZIzj0EAwIw\nfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNh\nbiBGcmFuY2lzY28xHzAdBgNVBAoTFkludGVybmV0IFdpZGdldHMsIEluYy4xDDAK\nBgNVBAsTA1dXVzEUMBIGA1UEAxMLZXhhbXBsZS5jb20wHhcNMTYxMTExMTcwNzAw\nWhcNMTcxMTExMTcwNzAwWjBjMQswCQYDVQQGEwJVUzEXMBUGA1UECBMOTm9ydGgg\nQ2Fyb2xpbmExEDAOBgNVBAcTB1JhbGVpZ2gxGzAZBgNVBAoTEkh5cGVybGVkZ2Vy\nIEZhYnJpYzEMMAoGA1UECxMDQ09QMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE\nHBuKsAO43hs4JGpFfiGMkB/xsILTsOvmN2WmwpsPHZNL6w8HWe3xCPQtdG/XJJvZ\n+C756KEsUBM3yw5PTfku8qOBpzCBpDAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYw\nFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFOFC\ndcUZ4es3ltiCgAVDoyLfVpPIMB8GA1UdIwQYMBaAFBdnQj2qnoI/xMUdn1vDmdG1\nnEgQMCUGA1UdEQQeMByCCm15aG9zdC5jb22CDnd3dy5teWhvc3QuY29tMAoGCCqG\nSM49BAMCA0cAMEQCIDf9Hbl4xn3z4EwNKmilM9lX2Fq4jWpAaRVB97OmVEeyAiAk\naXzB/jnlU39B7Wws9BIr9c8mSOEPF6VY1uGP+dKV0g==\n-----END -----\n\022\030\2641+WG\346\345O\r\360xik\363r*W\000\305\215Q\037\351\266" 
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateEndorserTransaction -> DEBU 629[0m validateEndorserTransaction info: there are 1 actions
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] validateEndorserTransaction -> DEBU 62a[0m validateEndorserTransaction info: signature header is valid
[36mpeer         |[0m {now} [36m{date} {time} UTC [protoutils] ValidateTransaction -> DEBU 62b[0m ValidateTransactionEnvelope returns err %!s(<nil>)
[36mpeer         |[0m {now} [36m{date} {time} UTC [txvalidator] Validate -> DEBU 62c[0m Transaction is for chain myc
[36mpeer         |[0m {now} [36m{date} {time} UTC [fsblkstorage] retrieveTransactionByID -> DEBU 62d[0m retrieveTransactionByID() - txId = [cd49cbf5609bac4b0d6331251d83dd0ed8b2ade1a99ec0e56b7a32223c0ff94b]
[36mpeer         |[0m {now} [36m{date} {time} UTC [txvalidator] Validate -> DEBU 62e[0m Validating transaction vscc tx validate
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] newQueryExecutor -> DEBU 62f[0m constructing new query executor [653debef-d3ba-4663-b331-a03b9c338152]
[36mpeer         |[0m {now} [36m{date} {time} UTC [stateleveldb] GetState -> DEBU 630[0m GetState(). ns=lscc, key=mycc
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] Done -> DEBU 631[0m Done with transaction simulation / query execution [653debef-d3ba-4663-b331-a03b9c338152]
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] NewTxSimulator -> DEBU 632[0m constructing new tx simulator
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] newLockBasedTxSimulator -> DEBU 633[0m constructing new tx simulator [ee8167d5-61c6-4ab7-902e-50592b9d49f6]
[36mpeer         |[0m {now} [36m{date} {time} UTC [ccprovider] NewCCContext -> DEBU 634[0m NewCCCC (chain=myc,chaincode=vscc,version=1.0.0,txid=75ca775d-1824-4e44-8fa7-efe5c0d04b33,syscc=true,proposal=0x0,canname=vscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [txvalidator] VSCCValidateTxForCC -> DEBU 635[0m Invoking VSCC txid cd49cbf5609bac4b0d6331251d83dd0ed8b2ade1a99ec0e56b7a32223c0ff94b chaindID myc
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Launch -> DEBU 636[0m chaincode is running(no need to launch) : vscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 637[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 638[0m chaincode canonical name: vscc:1.0.0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 639[0m [75ca775d]Inside sendExecuteMessage. Message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] setChaincodeProposal -> DEBU 63a[0m Setting chaincode proposal context...
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] sendExecuteMessage -> DEBU 63b[0m [75ca775d]sendExecuteMsg trigger event TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 63c[0m [75ca775d]Move state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 63d[0m [75ca775d]Fabric side Handling ChaincodeMessage of type: TRANSACTION in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] filterError -> DEBU 63e[0m Ignoring NoTransitionError: no transition
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 63f[0m [75ca775d]sending state message TRANSACTION
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 640[0m [75ca775d]Received message TRANSACTION from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 641[0m [75ca775d]Handling ChaincodeMessage of type: TRANSACTION(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] beforeTransaction -> DEBU 642[0m [75ca775d]Received TRANSACTION, invoking transaction on chaincode(Src:ready, Dst:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [vscc] Invoke -> DEBU 643[0m VSCC invoked
[36mpeer         |[0m {now} [36m{date} {time} UTC [vscc] deduplicateIdentity -> DEBU 644[0m Signature set is of size 1 out of 1 endorsement(s)
[36mpeer         |[0m {now} [36m{date} {time} UTC [vscc] Invoke -> DEBU 645[0m VSCC exists successfully
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 646[0m [75ca775d]Transaction completed. Sending COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 647[0m [75ca775d]Move state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] handleMessage -> DEBU 648[0m [75ca775d]Handling ChaincodeMessage of type: COMPLETED(state:ready)
[36mpeer         |[0m {now} [36m{date} {time} UTC [shim] func1 -> DEBU 649[0m [75ca775d]send state message COMPLETED
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] processStream -> DEBU 64a[0m [75ca775d]Received message COMPLETED from shim
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 64b[0m [75ca775d]Fabric side Handling ChaincodeMessage of type: COMPLETED in state ready
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] HandleMessage -> DEBU 64c[0m [75ca775d-1824-4e44-8fa7-efe5c0d04b33]HandleMessage- COMPLETED. Notify
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] notify -> DEBU 64d[0m notifying Txid:75ca775d-1824-4e44-8fa7-efe5c0d04b33
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] Execute -> DEBU 64e[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] Done -> DEBU 64f[0m Done with transaction simulation / query execution [ee8167d5-61c6-4ab7-902e-50592b9d49f6]
[36mpeer         |[0m {now} [36m{date} {time} UTC [txvalidator] Validate -> DEBU 650[0m END Block Validation
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] ValidateAndPrepare -> DEBU 651[0m Validating new block with num trans = [1]
[36mpeer         |[0m {now} [36m{date} {time} UTC [statevalidator] ValidateAndPrepareBatch -> DEBU 652[0m New block arrived for validation:&common.Block{{Header:(*common.BlockHeader)(0xc4218f0b40), Data:(*common.BlockData)(0xc4218f3fa0), Metadata:(*common.BlockMetadata)(0xc4218f3fe0)}}, doMVCCValidation=true
[36mpeer         |[0m {now} [36m{date} {time} UTC [statevalidator] ValidateAndPrepareBatch -> DEBU 653[0m Validating a block with [1] transactions
[36mpeer         |[0m {now} [36m{date} {time} UTC [stateleveldb] GetState -> DEBU 654[0m GetState(). ns=lscc, key=mycc
[36mpeer         |[0m {now} [36m{date} {time} UTC [stateleveldb] GetState -> DEBU 655[0m GetState(). ns=mycc, key=a
[36mpeer         |[0m {now} [36m{date} {time} UTC [stateleveldb] GetState -> DEBU 656[0m GetState(). ns=mycc, key=b
[36mpeer         |[0m {now} [36m{date} {time} UTC [statevalidator] ValidateAndPrepareBatch -> DEBU 657[0m Block [2] Transaction index [0] TxId [cd49cbf5609bac4b0d6331251d83dd0ed8b2ade1a99ec0e56b7a32223c0ff94b] marked as valid by state validator
[36mpeer         |[0m {now} [36m{date} {time} UTC [fsblkstorage] indexBlock -> DEBU 658[0m Indexing block [blockNum=2, blockHash=[]byte{{0x82, 0x97, 0x26, 0x7e, 0xf5, 0xac, 0x97, 0x5b, 0xa2, 0x33, 0x39, 0x7a, 0x26, 0x2d, 0xf, 0x50, 0x34, 0x1f, 0x22, 0xf7, 0x46, 0xaa, 0x3b, 0xfd, 0xba, 0x5f, 0xa5, 0xbc, 0x29, 0x33, 0x80, 0xa4}} txOffsets=
[36mpeer         |[0m {now} txId=cd49cbf5609bac4b0d6331251d83dd0ed8b2ade1a99ec0e56b7a32223c0ff94b locPointer=offset=70, bytesLength=3297
[36mpeer         |[0m {now} ]
[36mpeer         |[0m {now} [36m{date} {time} UTC [fsblkstorage] indexBlock -> DEBU 659[0m Adding txLoc [fileSuffixNum=0, offset=17873, bytesLength=3297] for tx ID: [cd49cbf5609bac4b0d6331251d83dd0ed8b2ade1a99ec0e56b7a32223c0ff94b] to index
[36mpeer         |[0m {now} [36m{date} {time} UTC [fsblkstorage] indexBlock -> DEBU 65a[0m Adding txLoc [fileSuffixNum=0, offset=17873, bytesLength=3297] for tx number:[0] ID: [cd49cbf5609bac4b0d6331251d83dd0ed8b2ade1a99ec0e56b7a32223c0ff94b] to blockNumTranNum index
[36mpeer         |[0m {now} [36m{date} {time} UTC [fsblkstorage] updateCheckpoint -> DEBU 65b[0m Broadcasting about update checkpointInfo: latestFileChunkSuffixNum=[0], latestFileChunksize=[23261], isChainEmpty=[false], lastBlockNumber=[2]
[36mpeer         |[0m {now} {date} {time} UTC [kvledger] Commit -> INFO 65c[0m Channel [myc]: Created block [2] with 1 transaction(s)
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] Commit -> DEBU 65d[0m Committing updates to state database
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] Commit -> DEBU 65e[0m Write lock acquired for committing updates to state database
[36mpeer         |[0m {now} [36m{date} {time} UTC [stateleveldb] ApplyUpdates -> DEBU 65f[0m Channel [myc]: Applying key=[[]byte{{0x6d, 0x79, 0x63, 0x63, 0x0, 0x61}}]
[36mpeer         |[0m {now} [36m{date} {time} UTC [stateleveldb] ApplyUpdates -> DEBU 660[0m Channel [myc]: Applying key=[[]byte{{0x6d, 0x79, 0x63, 0x63, 0x0, 0x62}}]
[36mpeer         |[0m {now} [36m{date} {time} UTC [lockbasedtxmgr] Commit -> DEBU 661[0m Updates committed to state database
[36mpeer         |[0m {now} [36m{date} {time} UTC [historyleveldb] Commit -> DEBU 662[0m Channel [myc]: Updating history database for blockNo [2] with [1] transactions
[36mpeer         |[0m {now} [36m{date} {time} UTC [historyleveldb] Commit -> DEBU 663[0m Channel [myc]: Updates committed to history database for blockNo [2]
[36mpeer         |[0m {now} [36m{date} {time} UTC [eventhub_producer] SendProducerBlockEvent -> DEBU 664[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [eventhub_producer] SendProducerBlockEvent -> DEBU 665[0m Channel [myc]: Block event for block number [2] contains transaction id: cd49cbf5609bac4b0d6331251d83dd0ed8b2ade1a99ec0e56b7a32223c0ff94b
[36mpeer         |[0m {now} {date} {time} UTC [eventhub_producer] SendProducerBlockEvent -> INFO 666[0m Channel [myc]: Sending event for block number [2]
[36mpeer         |[0m {now} [36m{date} {time} UTC [eventhub_producer] Send -> DEBU 667[0m Entry
[36mpeer         |[0m {now} [36m{date} {time} UTC [eventhub_producer] Send -> DEBU 668[0m Event processor timeout > 0
[36mpeer         |[0m {now} [36m{date} {time} UTC [eventhub_producer] Send -> DEBU 669[0m Event sent successfully
[36mpeer         |[0m {now} [36m{date} {time} UTC [eventhub_producer] Send -> DEBU 66a[0m Exit
[36mpeer         |[0m {now} [36m{date} {time} UTC [eventhub_producer] SendProducerBlockEvent -> DEBU 66b[0m Exit
[36mpeer         |[0m {now} [31m{date} {time} UTC [chaincode] processStream -> ERRO 66c[0m Error handling chaincode support stream: rpc error: code = Canceled desc = context canceled
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] deregisterHandler -> DEBU 66d[0m Deregister handler: mycc:0
[36mpeer         |[0m {now} [36m{date} {time} UTC [chaincode] deregisterHandler -> DEBU 66e[0m Deregistered handler with key: mycc:0
[36mpeer         |[0m {now} [36m{date} {time} UTC [nodeCmd] func3 -> DEBU 66f[0m sig: terminated
[36mpeer         |[0m {now} [36m{date} {time} UTC [fsblkstorage] Shutdown -> DEBU 670[0m closing fs blockStore:myc
